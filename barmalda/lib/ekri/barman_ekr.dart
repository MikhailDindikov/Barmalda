import 'dart:async';
import 'dart:math';
import 'dart:ui';

import 'package:barmalda/butilka_model.dart';
import 'package:barmalda/disco.dart';
import 'package:barmalda/ekri/gla_ekr.dart';
import 'package:barmalda/komorka.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter_animate/flutter_animate.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'package:get/get.dart';
import 'package:intl/intl.dart';

class BarmanEkr extends StatefulWidget {
  final int barSec;
  const BarmanEkr({required this.barSec, super.key});bool eqBut0(
    ButilkaModel other,
    ButilkaModel other1,
  ) =>
      other.butType == other1.butType &&
      other.butCol[0] == other1.butCol[0] &&
      other.butCol[1] == other1.butCol[1] &&
      other.butCol[2] == other1.butCol[2];
bool eqBut1(
    ButilkaModel other,
    ButilkaModel other1,
  ) =>
      other.butType == other1.butType &&
      other.butCol[0] == other1.butCol[0] &&
      other.butCol[1] == other1.butCol[1] &&
      other.butCol[2] == other1.butCol[2];
bool eqBut2(
    ButilkaModel other,
    ButilkaModel other1,
  ) =>
      other.butType == other1.butType &&
      other.butCol[0] == other1.butCol[0] &&
      other.butCol[1] == other1.butCol[1] &&
      other.butCol[2] == other1.butCol[2];
bool eqBut3(
    ButilkaModel other,
    ButilkaModel other1,
  ) =>
      other.butType == other1.butType &&
      other.butCol[0] == other1.butCol[0] &&
      other.butCol[1] == other1.butCol[1] &&
      other.butCol[2] == other1.butCol[2];
bool eqBut4(
    ButilkaModel other,
    ButilkaModel other1,
  ) =>
      other.butType == other1.butType &&
      other.butCol[0] == other1.butCol[0] &&
      other.butCol[1] == other1.butCol[1] &&
      other.butCol[2] == other1.butCol[2];
bool eqBut5(
    ButilkaModel other,
    ButilkaModel other1,
  ) =>
      other.butType == other1.butType &&
      other.butCol[0] == other1.butCol[0] &&
      other.butCol[1] == other1.butCol[1] &&
      other.butCol[2] == other1.butCol[2];
bool eqBut6(
    ButilkaModel other,
    ButilkaModel other1,
  ) =>
      other.butType == other1.butType &&
      other.butCol[0] == other1.butCol[0] &&
      other.butCol[1] == other1.butCol[1] &&
      other.butCol[2] == other1.butCol[2];
bool eqBut7(
    ButilkaModel other,
    ButilkaModel other1,
  ) =>
      other.butType == other1.butType &&
      other.butCol[0] == other1.butCol[0] &&
      other.butCol[1] == other1.butCol[1] &&
      other.butCol[2] == other1.butCol[2];
bool eqBut8(
    ButilkaModel other,
    ButilkaModel other1,
  ) =>
      other.butType == other1.butType &&
      other.butCol[0] == other1.butCol[0] &&
      other.butCol[1] == other1.butCol[1] &&
      other.butCol[2] == other1.butCol[2];
bool eqBut9(
    ButilkaModel other,
    ButilkaModel other1,
  ) =>
      other.butType == other1.butType &&
      other.butCol[0] == other1.butCol[0] &&
      other.butCol[1] == other1.butCol[1] &&
      other.butCol[2] == other1.butCol[2];


  @override
  State<BarmanEkr> createState() => _BarmanEkrState();
}

class _BarmanEkrState extends State<BarmanEkr> with TickerProviderStateMixin {
  final String rCo = '#FA8585';
  final String bCo = '#7B80FD';
  final String gCo = '#90FCA1';

  final genRandomizer = Random();
  bool isUpRotator = true;
  RxDouble rotatorFon = 0.0.obs;
  RxDouble rotatorTur = 0.0.obs;
  RxBool mup = (Komorka.komorka!.getBool('mup') ?? true).obs;
  bool barPa = false;
  late Timer rotator;
  late Timer schitator;
  RxInt barSecLe = 0.obs;
  RxInt barSco = 0.obs;
  Rx<ButilkaModel> curBut = ButilkaModel('em').obs;
  Rx<ButilkaModel> wantedBut = ButilkaModel('em').obs;
  RxBool showDi = true.obs;
  RxBool cocDone = false.obs;
  RxBool ha = false.obs;
  List<String> rao = [];

  late final _rdDrController = AnimationController(vsync: this);
  late final _blDrController = AnimationController(vsync: this);
  late final _grDrController = AnimationController(vsync: this);
  late final _meCorController = AnimationController(vsync: this);
  late final _laCorController = AnimationController(vsync: this);
  late final _orCorController = AnimationController(vsync: this);

  _checkBarDone() async {
    if (curBut.value.butCol.length == 3 &&
        (wantedBut.value.butType == 'em' || curBut.value.butType != 'em')) {
      if (curBut.value.eqBut(wantedBut.value)) {
        barSco.value += 100;
        ha.value = true;
      } else {
        barSco.value = max(0, barSco.value - 100);
        ha.value = false;
      }
      showDi.value = false;
      curBut.value = ButilkaModel('em');
      cocDone.value = true;

      await Future.delayed(Duration(milliseconds: 450));
      _genBut();
      showDi.value = true;
      cocDone.value = false;

      rao.removeLast();
      final butTypeRand = genRandomizer.nextInt(3);
      if (butTypeRand == 0) {
        rao.insert(0, 'bc_g');
      } else if (butTypeRand == 1) {
        rao.insert(0, 'rd_g');
      } else if (butTypeRand == 2) {
        rao.insert(0, 'bl_g');
      }
      setState(() {});
    }
  }

  _genBut() {
    var resBut = ButilkaModel('em');
    final butTypeRand = genRandomizer.nextInt(4);
    if (butTypeRand == 0) {
      resBut.butType = 'em';
    } else if (butTypeRand == 1) {
      resBut.butType = 'me';
    } else if (butTypeRand == 2) {
      resBut.butType = 'la';
    } else if (butTypeRand == 3) {
      resBut.butType = 'or';
    }
    final butCol1Rand = genRandomizer.nextInt(3);
    if (butCol1Rand == 0) {
      resBut.butCol.add(rCo);
    } else if (butCol1Rand == 1) {
      resBut.butCol.add(bCo);
    } else if (butCol1Rand == 2) {
      resBut.butCol.add(gCo);
    }
    final butCol2Rand = genRandomizer.nextInt(3);
    if (butCol2Rand == 0) {
      resBut.butCol.add(rCo);
    } else if (butCol2Rand == 1) {
      resBut.butCol.add(bCo);
    } else if (butCol2Rand == 2) {
      resBut.butCol.add(gCo);
    }
    final butCol3Rand = genRandomizer.nextInt(3);
    if (butCol3Rand == 0) {
      resBut.butCol.add(rCo);
    } else if (butCol3Rand == 1) {
      resBut.butCol.add(bCo);
    } else if (butCol3Rand == 2) {
      resBut.butCol.add(gCo);
    }

    wantedBut.value = resBut;
  }

  @override
  void initState() {
    final butTypeRand = genRandomizer.nextInt(3);
    if (butTypeRand == 0) {
      rao.add('bc_g');
    } else if (butTypeRand == 1) {
      rao.add('rd_g');
    } else if (butTypeRand == 2) {
      rao.add('bl_g');
    }
    final butTypeRand1 = genRandomizer.nextInt(3);
    if (butTypeRand1 == 0) {
      rao.add('bc_g');
    } else if (butTypeRand1 == 1) {
      rao.add('rd_g');
    } else if (butTypeRand1 == 2) {
      rao.add('bl_g');
    }
    super.initState();
    WidgetsBinding.instance.addPostFrameCallback((timeStamp) {
      _genBut();
      rotator = Timer.periodic(Duration(milliseconds: 50), (timer) {
        rotatorTur.value += 0.015;
        if (rotatorTur.value >= 1) {
          rotatorTur.value -= 1;
        }
      });
      schitator = Timer.periodic(Duration(milliseconds: 1000), (timer) {
        if (!barPa) {
          barSecLe.value++;
        }
        if (widget.barSec - barSecLe.value <= 0) {
          schitator.cancel();
          _barFinal();
        }
      });
      Timer.periodic(Duration(milliseconds: 50), (timer) {
        if (isUpRotator) {
          rotatorFon.value += 0.015;
          if (rotatorFon.value >= 1) {
            isUpRotator = false;
          }
        } else {
          rotatorFon.value -= 0.015;
          if (rotatorFon.value <= 0) {
            isUpRotator = true;
          }
        }
      });
    });
  }

  String generStakan(List<String> cols, String type) {
    switch (type) {
      case 'em':
        return '''<svg width="77" height="136" viewBox="0 0 77 136" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M23.2821 110.677L20.1445 54.0651C20.011 51.7285 21.8135 50.4601 23.1486 49.5255C24.4171 48.6576 24.9511 48.1903 24.8844 47.456C24.8176 46.7216 24.2168 46.3878 22.8816 45.6535C21.4797 44.9191 19.5437 43.851 19.4101 41.5144C19.2766 39.1778 21.0791 37.9094 22.4143 36.9748C23.6827 36.1069 24.2168 35.6396 24.2168 34.9053C24.15 34.1709 23.5492 33.8371 22.214 33.1028C20.8121 32.3684 18.8761 31.3003 18.7425 28.9637C18.609 26.6271 20.4115 25.3587 21.7467 24.4241C23.0151 23.5562 23.5492 23.0889 23.4824 22.3546L22.6813 7.13352L25.4852 7L26.3531 22.2211C26.4866 24.5576 24.6841 25.826 23.3489 26.7607C22.0805 27.6285 21.5464 28.0958 21.5464 28.8302C21.6132 29.5645 22.214 29.8983 23.5492 30.6327C24.9511 31.367 26.8871 32.4352 27.0207 34.7717C27.1542 37.1083 25.3517 38.3767 24.0165 39.3114C22.7481 40.1792 22.214 40.6465 22.2808 41.3809C22.3475 42.1152 22.9484 42.449 24.2835 43.1834C25.6855 43.9177 27.6215 44.9859 27.755 47.3224C27.8885 49.659 26.086 50.9274 24.7509 51.862C23.4824 52.7299 22.9484 53.1972 23.0151 53.9316L26.1528 110.543L23.2821 110.677Z" fill="#DD4F51"/>
<g opacity="0.7" filter="url(#filter0_d_67_69)">
<path d="M38.1695 127.5C24.6174 127.5 18.5424 126.098 16.4061 122.159L15.9388 120.757L15.6717 119.022L15.605 118.621C13.4019 99.5279 12.4673 67.3501 12.1335 51.1277L12.0668 47.5227V46.5213C12 43.2501 12 41.3141 12 41.1138C12 40.8468 12 39.9789 12 39.1778V38.0429C12 37.7091 12 37.0415 12 36.3739L12.0668 33.1695H64.7396L64.8064 36.3739C64.8064 37.0415 64.8064 37.6423 64.8064 38.0429V39.1778C64.8064 40.0457 64.8064 40.9135 64.8064 41.1806C64.8064 41.5144 64.8064 43.5839 64.7396 46.7216L64.6728 53.264L64.6061 53.1972C64.2723 69.8202 63.3377 100.196 61.2014 118.488L60.9343 120.624L60.467 122.092C58.3975 126.031 52.1222 127.5 38.6368 127.5H38.1695Z" fill="white"/>
</g>
<mask id="mask0_67_69" style="mask-type:alpha" maskUnits="userSpaceOnUse" x="15" y="43" width="47" height="77">
<path opacity="0.9" d="M15.338 43.7174C15.338 44.4518 15.338 45.3197 15.338 46.321V47.2557C15.605 61.7424 16.4729 95.1886 18.8094 114.549L18.8762 114.949H18.9429C19.5438 117.152 22.6814 119.088 38.1028 119.088H38.6368C54.1917 119.088 57.2626 117.086 57.8634 114.816L57.9302 114.415C60.2668 95.1219 61.1346 61.8759 61.4017 47.3892H61.4684V46.3878C61.4684 45.3197 61.4684 44.385 61.5352 43.5839H15.338V43.7174Z" fill="#D9D9D9"/>
</mask>
<g mask="url(#mask0_67_69)">
<rect x="-0.0167236" y="42.3822" width="79.4432" height="26.7036" ${cols.length > 2 ? 'fill="${cols[2]}"' : 'fill="#FA8585" fill-opacity="0"'}/>
<rect x="-0.0167236" y="69.0858" width="79.4432" height="26.7036" ${cols.length > 1 ? 'fill="${cols[1]}"' : 'fill="#FA8585" fill-opacity="0"'}/>
<rect x="-0.0167236" y="95.7894" width="79.4432" height="26.7036" ${cols.length > 0 ? 'fill="${cols[0]}"' : 'fill="#FA8585" fill-opacity="0"'}/>
</g>
<path opacity="0.2" d="M32.6287 108.474C32.5619 110.61 30.7594 112.279 28.6231 112.212C26.4868 112.145 24.8179 110.343 24.8846 108.207C24.9514 106.07 26.7539 104.401 28.8902 104.468C30.9597 104.535 32.6954 106.337 32.6287 108.474Z" fill="white"/>
<path opacity="0.2" d="M28.7565 98.0593C28.6898 100.73 26.42 102.799 23.8164 102.732C21.146 102.666 19.0765 100.396 19.1432 97.7922C19.21 95.1219 21.4798 93.0523 24.0834 93.1191C26.7538 93.1859 28.8233 95.3889 28.7565 98.0593Z" fill="white"/>
<path opacity="0.2" d="M32.3615 88.179C32.2948 89.8479 30.8928 91.1831 29.2239 91.1164C27.5549 91.0496 26.2197 89.6477 26.2865 87.9787C26.3532 86.3097 27.7552 84.9745 29.4241 85.0413C31.0931 85.108 32.4283 86.51 32.3615 88.179Z" fill="white"/>
<path opacity="0.2" d="M26.0862 82.1039C26.0195 83.3055 25.0181 84.3069 23.8164 84.2402C22.548 84.1734 21.6134 83.172 21.6801 81.9036C21.7469 80.7019 22.7483 79.7006 23.9499 79.7673C25.1516 79.8341 26.153 80.9022 26.0862 82.1039Z" fill="white"/>
<path opacity="0.2" d="M23.6829 73.759C23.6161 75.0274 22.6147 75.962 21.3463 75.962C20.1446 75.8953 19.1432 74.8939 19.21 73.6255C19.2768 72.4238 20.2781 71.4224 21.5466 71.4892C22.7482 71.4892 23.6829 72.5573 23.6829 73.759Z" fill="white"/>
<path opacity="0.4" d="M24.0165 126.565C26.8204 127.099 30.4921 127.433 35.0985 127.5C31.2264 97.5919 29.8913 51.1944 29.4907 33.1695H18.5422C18.9428 50.9941 20.278 96.6573 24.0165 126.565Z" fill="white"/>
<defs>
<filter id="filter0_d_67_69" x="11" y="33.1695" width="54.8064" height="102.33" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
<feOffset dy="7"/>
<feGaussianBlur stdDeviation="0.5"/>
<feComposite in2="hardAlpha" operator="out"/>
<feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.25 0"/>
<feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_67_69"/>
<feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_67_69" result="shape"/>
</filter>
</defs>
</svg>
''';
      case 'me':
        return '''
<svg width="77" height="136" viewBox="0 0 77 136" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M75.2826 23.6455C75.3483 23.7145 75.4173 23.7178 75.4141 23.7835L76.5752 22.6567C76.5095 22.5878 76.4438 22.5188 76.3748 22.5154C69.1651 15.9144 59.923 12.6989 50.6579 12.7703L50.6464 14.4138C59.57 14.2598 68.4737 17.3272 75.2826 23.6455Z" fill="#4F8625"/>
<path d="M50.7876 14.3549L50.7857 15.8015C59.2234 15.6895 67.7166 18.6709 74.2659 24.6477C74.3316 24.7167 74.4005 24.7201 74.3973 24.7857L75.4141 23.7834C75.3484 23.7144 75.2827 23.6454 75.2827 23.6454C68.4737 17.3271 59.57 14.2598 50.7876 14.3549Z" fill="#F6F779"/>
<path d="M74.3975 24.7857C74.3317 24.7167 74.3317 24.7168 74.266 24.6478C67.72 18.6054 59.2235 15.6896 50.7858 15.8016L51.4824 46.6773L74.3975 24.7857Z" fill="#D74232"/>
<path d="M62.2992 24.8496C61.7522 26.138 60.3616 27.7137 60.3616 27.7137C60.3616 27.7137 60.4614 25.6801 60.9427 24.3227C61.4898 23.0344 61.9163 22.7923 62.2546 22.9404C62.6619 23.0919 62.7773 23.5579 62.2992 24.8496Z" fill="#3F3E3E"/>
<path d="M56.2563 19.8184C55.8426 19.7981 55.485 20.0436 55.3452 21.4835C55.1397 22.8544 55.6605 24.9185 55.6605 24.9185C55.6605 24.9185 56.5812 23.0566 56.7868 21.6857C56.8576 20.2425 56.5979 19.901 56.2563 19.8184Z" fill="#3F3E3E"/>
<path d="M56.3718 27.3208C55.9581 27.3005 55.6005 27.546 55.4607 28.9858C55.2552 30.3567 55.7759 32.4208 55.7759 32.4208C55.7759 32.4208 56.6967 30.5589 56.9022 29.1881C57.042 27.7482 56.7823 27.4067 56.3718 27.3208Z" fill="#3F3E3E"/>
<path d="M67.1816 25.3523C66.2962 26.4925 65.7138 28.5025 65.7138 28.5025C65.7138 28.5025 67.4987 27.3406 68.3183 26.1314C69.2037 24.9912 69.0883 24.5252 68.8222 24.3149C68.4871 24.1012 67.998 24.2087 67.1816 25.3523Z" fill="#3F3E3E"/>
<path d="M61.7991 30.8094C60.9827 31.953 60.3313 33.9596 60.3313 33.9596C60.3313 33.9596 62.1162 32.7977 62.9359 31.5885C63.8212 30.4483 63.7058 29.9823 63.4397 29.772C63.1014 29.6238 62.6155 29.6657 61.7991 30.8094Z" fill="#3F3E3E"/>
<path d="M57.3839 34.867C57.0456 34.7189 56.619 34.961 56.072 36.2494C55.5249 37.5377 55.4909 39.6404 55.4909 39.6404C55.4909 39.6404 56.8814 38.0646 57.4284 36.7762C57.9098 35.4189 57.7222 35.0151 57.3839 34.867Z" fill="#3F3E3E"/>
<path d="M74.8301 24.4124C74.4951 24.1987 72.3066 22.3158 72.3066 22.3158C72.3066 22.3158 71.1795 21.3398 70.2432 20.7021C69.3069 20.0643 68.5052 19.4989 67.7661 19.068C67.027 18.6372 65.7459 17.9825 65.4043 17.9C65.0628 17.8174 64.0382 17.5699 62.8228 16.9842C61.6075 16.3984 60.251 15.8715 59.9752 15.858C59.7027 15.7789 58.1361 15.3075 57.8603 15.2939C57.5845 15.2804 56.2151 15.0159 55.9393 15.0024C55.6635 14.9888 54.6229 15.0693 53.3128 15.005C52.1406 14.9475 51.2475 14.8379 50.7616 14.8798L50.7823 15.8672L50.8094 16.7234C51.8533 16.5774 52.8843 16.6937 54.1061 17.1483C55.5315 17.6785 56.8062 18.4644 58.2348 18.9291C60.6159 19.7036 63.1303 19.1693 65.3445 20.5274C66.2841 21.0996 67.2894 21.7408 68.3075 22.1196C70.2059 22.8703 72.5148 23.707 74.2496 24.9758L74.4661 24.7891L74.8301 24.4124Z" fill="#F6F779"/>
<path d="M23.2822 110.677L20.1445 54.0651C20.011 51.7285 21.8135 50.4601 23.1487 49.5255C24.4171 48.6576 24.9512 48.1903 24.8844 47.456C24.8177 46.7216 24.2168 46.3878 22.8817 45.6535C21.4797 44.9191 19.5437 43.851 19.4102 41.5144C19.2767 39.1778 21.0792 37.9094 22.4143 36.9748C23.6828 36.1069 24.2168 35.6396 24.2168 34.9053C24.1501 34.1709 23.5493 33.8371 22.2141 33.1028C20.8121 32.3684 18.8761 31.3003 18.7426 28.9637C18.6091 26.6271 20.4116 25.3587 21.7468 24.4241C23.0152 23.5562 23.5492 23.0889 23.4825 22.3546L22.6814 7.13352L25.4853 7L26.3531 22.2211C26.4866 24.5576 24.6842 25.826 23.349 26.7607C22.0805 27.6285 21.5465 28.0958 21.5465 28.8302C21.6132 29.5645 22.2141 29.8983 23.5493 30.6327C24.9512 31.367 26.8872 32.4352 27.0207 34.7717C27.1542 37.1083 25.3517 38.3767 24.0166 39.3114C22.7481 40.1792 22.2141 40.6465 22.2808 41.3809C22.3476 42.1152 22.9484 42.449 24.2836 43.1834C25.6855 43.9177 27.6216 44.9859 27.7551 47.3224C27.8886 49.659 26.0861 50.9274 24.7509 51.862C23.4825 52.7299 22.9484 53.1972 23.0152 53.9316L26.1528 110.543L23.2822 110.677Z" fill="#DD4F51"/>
<g opacity="0.7" filter="url(#filter0_d_67_71)">
<path d="M38.1695 127.5C24.6174 127.5 18.5424 126.098 16.4061 122.159L15.9388 120.757L15.6717 119.022L15.605 118.621C13.4019 99.5279 12.4673 67.3501 12.1335 51.1277L12.0668 47.5227V46.5213C12 43.2501 12 41.3141 12 41.1138C12 40.8468 12 39.9789 12 39.1778V38.0429C12 37.7091 12 37.0415 12 36.3739L12.0668 33.1695H64.7396L64.8064 36.3739C64.8064 37.0415 64.8064 37.6423 64.8064 38.0429V39.1778C64.8064 40.0457 64.8064 40.9135 64.8064 41.1806C64.8064 41.5144 64.8064 43.5839 64.7396 46.7216L64.6728 53.264L64.6061 53.1972C64.2723 69.8202 63.3377 100.196 61.2014 118.488L60.9343 120.624L60.467 122.092C58.3975 126.031 52.1222 127.5 38.6368 127.5H38.1695Z" fill="white"/>
</g>
<mask id="mask0_67_71" style="mask-type:alpha" maskUnits="userSpaceOnUse" x="15" y="43" width="47" height="77">
<path opacity="0.9" d="M15.3379 43.7174C15.3379 44.4518 15.3379 45.3197 15.3379 46.321V47.2557C15.6049 61.7424 16.4728 95.1886 18.8094 114.549L18.8761 114.949H18.9429C19.5437 117.152 22.6814 119.088 38.1027 119.088H38.6368C54.1916 119.088 57.2625 117.086 57.8634 114.816L57.9301 114.415C60.2667 95.1219 61.1346 61.8759 61.4016 47.3892H61.4684V46.3878C61.4684 45.3197 61.4684 44.385 61.5351 43.5839H15.3379V43.7174Z" fill="#D9D9D9"/>
</mask>
<g mask="url(#mask0_67_71)">
<rect x="-0.0167236" y="42.3822" width="79.4432" height="26.7036" ${cols.length > 2 ? 'fill="${cols[2]}"' : 'fill="#FA8585" fill-opacity="0"'}/>
<rect x="-0.0167236" y="69.0858" width="79.4432" height="26.7036" ${cols.length > 1 ? 'fill="${cols[1]}"' : 'fill="#FA8585" fill-opacity="0"'}/>
<rect x="-0.0167236" y="95.7894" width="79.4432" height="26.7036" ${cols.length > 0 ? 'fill="${cols[0]}"' : 'fill="#FA8585" fill-opacity="0"'}/>
</g>
<path opacity="0.2" d="M32.6287 108.474C32.5619 110.61 30.7594 112.279 28.6231 112.212C26.4868 112.145 24.8179 110.343 24.8846 108.207C24.9514 106.07 26.7539 104.401 28.8902 104.468C30.9597 104.535 32.6954 106.337 32.6287 108.474Z" fill="white"/>
<path opacity="0.2" d="M28.7566 98.0593C28.6898 100.73 26.42 102.799 23.8164 102.732C21.1461 102.666 19.0765 100.396 19.1433 97.7922C19.2101 95.1219 21.4799 93.0523 24.0835 93.1191C26.7538 93.1859 28.8234 95.3889 28.7566 98.0593Z" fill="white"/>
<path opacity="0.2" d="M32.3615 88.179C32.2948 89.8479 30.8928 91.1831 29.2239 91.1164C27.5549 91.0496 26.2197 89.6477 26.2865 87.9787C26.3532 86.3097 27.7552 84.9745 29.4241 85.0413C31.0931 85.108 32.4283 86.51 32.3615 88.179Z" fill="white"/>
<path opacity="0.2" d="M26.0862 82.1039C26.0195 83.3055 25.0181 84.3069 23.8164 84.2402C22.548 84.1734 21.6134 83.172 21.6801 81.9036C21.7469 80.7019 22.7483 79.7006 23.9499 79.7673C25.1516 79.8341 26.153 80.9022 26.0862 82.1039Z" fill="white"/>
<path opacity="0.2" d="M23.6829 73.759C23.6162 75.0274 22.6148 75.962 21.3464 75.962C20.1447 75.8953 19.1433 74.8939 19.2101 73.6255C19.2768 72.4238 20.2782 71.4224 21.5466 71.4892C22.7483 71.4892 23.6829 72.5573 23.6829 73.759Z" fill="white"/>
<path opacity="0.4" d="M24.0165 126.565C26.8204 127.099 30.4921 127.433 35.0985 127.5C31.2264 97.5919 29.8913 51.1944 29.4907 33.1695H18.5422C18.9428 50.9941 20.278 96.6573 24.0165 126.565Z" fill="white"/>
<defs>
<filter id="filter0_d_67_71" x="11" y="33.1695" width="54.8064" height="102.33" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
<feOffset dy="7"/>
<feGaussianBlur stdDeviation="0.5"/>
<feComposite in2="hardAlpha" operator="out"/>
<feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.25 0"/>
<feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_67_71"/>
<feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_67_71" result="shape"/>
</filter>
</defs>
</svg>
''';

      case 'or':
        return '''
<svg width="77" height="136" viewBox="0 0 77 136" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M23.2822 110.677L20.1445 54.0651C20.011 51.7285 21.8135 50.4601 23.1487 49.5255C24.4171 48.6576 24.9512 48.1903 24.8844 47.456C24.8177 46.7216 24.2168 46.3878 22.8817 45.6535C21.4797 44.9191 19.5437 43.851 19.4102 41.5144C19.2767 39.1778 21.0792 37.9094 22.4143 36.9748C23.6828 36.1069 24.2168 35.6396 24.2168 34.9053C24.1501 34.1709 23.5493 33.8371 22.2141 33.1028C20.8121 32.3684 18.8761 31.3003 18.7426 28.9637C18.6091 26.6271 20.4116 25.3587 21.7468 24.4241C23.0152 23.5562 23.5492 23.0889 23.4825 22.3546L22.6814 7.13352L25.4853 7L26.3531 22.2211C26.4866 24.5576 24.6842 25.826 23.349 26.7607C22.0805 27.6285 21.5465 28.0958 21.5465 28.8302C21.6132 29.5645 22.2141 29.8983 23.5493 30.6327C24.9512 31.367 26.8872 32.4352 27.0207 34.7717C27.1542 37.1083 25.3517 38.3767 24.0166 39.3114C22.7481 40.1792 22.2141 40.6465 22.2808 41.3809C22.3476 42.1152 22.9484 42.449 24.2836 43.1834C25.6855 43.9177 27.6216 44.9859 27.7551 47.3224C27.8886 49.659 26.0861 50.9274 24.7509 51.862C23.4825 52.7299 22.9484 53.1972 23.0152 53.9316L26.1528 110.543L23.2822 110.677Z" fill="#DD4F51"/>
<mask id="mask0_65_12941" style="mask-type:luminance" maskUnits="userSpaceOnUse" x="22" y="0" width="55" height="60">
<path d="M43.1109 59.4371L76.5216 17.3358L55.8784 0.95372L22.4676 43.0551L43.1109 59.4371Z" fill="white"/>
</mask>
<g mask="url(#mask0_65_12941)">
<path d="M46.1087 56.1246C35.828 47.956 34.1312 33.046 42.242 22.7636C50.4106 12.4829 65.3206 10.7861 75.603 18.8969C85.8837 27.0655 87.5805 41.9755 79.4697 52.2579C71.3011 62.5386 56.3911 64.2354 46.1087 56.1246Z" fill="#DA8F22"/>
<path d="M47.2505 54.6555C37.7597 47.1463 36.2036 33.3391 43.711 23.9061C51.2202 14.4153 65.0274 12.8592 74.4604 20.3666C83.9512 27.8758 85.5073 41.683 77.9999 51.116C70.4907 60.6068 56.7413 62.1646 47.2505 54.6555Z" fill="#E5AE42"/>
<path d="M48.3314 53.2997C39.5745 46.3905 38.1591 33.6861 45.0683 24.9291C51.9774 16.1721 64.6819 14.7568 73.4389 21.666C82.1958 28.5751 83.6112 41.2796 76.702 50.0366C69.7351 58.7918 57.0289 60.2649 48.3314 53.2997Z" fill="#EDD77F"/>
<path d="M76.1096 48.573C78.8223 44.8374 79.9942 40.4201 79.6589 36.1315L62.8918 38.0623L76.1096 48.573Z" fill="#E5AE42"/>
<path d="M61.4636 35.5337L71.9743 22.3159C68.2388 19.6032 63.8214 18.4313 59.5328 18.7666L61.4636 35.5337Z" fill="#E5AE42"/>
<path d="M62.707 36.4957L79.4741 34.5649C78.7905 30.3238 76.6559 26.2709 73.2177 23.2779L62.707 36.4957Z" fill="#E5AE42"/>
<path d="M75.0898 49.8149L61.872 39.3042L63.8027 56.0713C68.0421 55.4455 72.095 53.3108 75.0898 49.8149Z" fill="#E5AE42"/>
<path d="M60.3054 39.4891L49.7947 52.7069C53.5303 55.4197 57.9476 56.5916 62.2362 56.2563L60.3054 39.4891Z" fill="#E5AE42"/>
<path d="M59.062 38.5267L42.2948 40.4574C42.9784 44.6986 45.1131 48.7515 48.5513 51.7445L59.062 38.5267Z" fill="#E5AE42"/>
<path d="M58.8787 36.9026L45.6609 26.3919C42.9481 30.1275 41.7763 34.5448 42.1115 38.8334L58.8787 36.9026Z" fill="#E5AE42"/>
<path d="M59.839 35.7169L57.9082 18.9497C53.6671 19.6333 49.6142 21.768 46.6212 25.2061L59.839 35.7169Z" fill="#E5AE42"/>
<path d="M69.1366 49.7536C68.8615 49.2829 68.7597 48.8173 68.8787 48.7052C69.0554 48.5948 69.3934 48.894 69.7263 49.3664C70.0015 49.8371 70.1033 50.3027 69.9843 50.4148C69.8076 50.5252 69.4118 50.2244 69.1366 49.7536Z" fill="#DA8F22"/>
<path d="M64.39 47.994C64.1743 47.4673 64.1303 47.0034 64.3053 46.9508C64.4803 46.8981 64.8166 47.255 65.034 47.724C65.2496 48.2508 65.2937 48.7147 65.1187 48.7673C64.9436 48.8199 64.6073 48.463 64.39 47.994Z" fill="#DA8F22"/>
<path d="M67.8464 52.3174C67.6307 51.7907 67.5289 51.3251 67.7039 51.2724C67.8806 51.1621 68.217 51.519 68.4326 52.0457C68.6483 52.5725 68.7501 53.0381 68.5751 53.0907C68.4 53.1433 68.0637 52.7864 67.8464 52.3174Z" fill="#DA8F22"/>
<path d="M64.5907 52.9144C64.4329 52.3893 64.4466 51.9272 64.6233 51.8168C64.7983 51.7642 65.0769 52.1193 65.2925 52.6461C65.4504 53.1712 65.4367 53.6333 65.26 53.7437C65.0255 53.8524 64.7469 53.4972 64.5907 52.9144Z" fill="#DA8F22"/>
<path d="M67.2209 46.1123C66.8285 45.6959 66.6689 45.2286 66.8457 45.1182C66.9646 45.0061 67.4199 45.2509 67.7546 45.6656C68.1469 46.0819 68.3065 46.5492 68.1298 46.6596C67.953 46.77 67.5555 46.5269 67.2209 46.1123Z" fill="#DA8F22"/>
<path d="M63.4888 43.2841C63.2732 42.7574 63.1713 42.2918 63.3463 42.2392C63.5231 42.1288 63.8594 42.4857 64.1328 43.0142C64.3485 43.5409 64.4503 44.0065 64.2753 44.0592C64.1002 44.1118 63.7062 43.7532 63.4888 43.2841Z" fill="#DA8F22"/>
<path d="M71.726 50.1777C71.3931 49.7053 71.2913 49.2397 71.4102 49.1276C71.587 49.0172 71.9828 49.318 72.2596 49.731C72.5925 50.2034 72.6943 50.669 72.5753 50.7811C72.4564 50.8932 72.0589 50.6501 71.726 50.1777Z" fill="#DA8F22"/>
<path d="M75.0819 40.3324C74.5654 40.2014 74.1102 39.9567 74.1731 39.7851C74.236 39.6135 74.6999 39.5694 75.2163 39.7004C75.7328 39.8313 76.1881 40.0761 76.1252 40.2477C76.1201 40.421 75.5984 40.4634 75.0819 40.3324Z" fill="#DA8F22"/>
<path d="M70.4512 42.4497C69.9364 42.261 69.6001 41.904 69.663 41.7325C69.7259 41.5609 70.1881 41.5746 70.7606 41.765C71.2754 41.9538 71.6117 42.3107 71.5488 42.4823C71.4842 42.7116 70.9643 42.6962 70.4512 42.4497Z" fill="#DA8F22"/>
<path d="M75.9258 43.0749C75.4111 42.8861 75.0153 42.5853 75.0782 42.4137C75.1411 42.2421 75.6032 42.2558 76.1775 42.3885C76.6923 42.5772 77.0881 42.8781 77.0251 43.0497C76.9605 43.279 76.4984 43.2653 75.9258 43.0749Z" fill="#DA8F22"/>
<path d="M74.1085 45.854C73.5955 45.6075 73.2591 45.2506 73.3798 45.0807C73.4427 44.9091 73.9609 44.9823 74.4162 45.2271C74.9293 45.4736 75.2656 45.8305 75.1449 46.0004C75.082 46.172 74.6216 46.1005 74.1085 45.854Z" fill="#DA8F22"/>
<path d="M71.1268 39.1743C70.5491 39.1572 70.1499 38.9719 70.1567 38.7408C70.1619 38.5675 70.6292 38.4079 71.2051 38.4828C71.7828 38.5 72.1821 38.6853 72.1752 38.9164C72.1701 39.0897 71.7045 39.1915 71.1268 39.1743Z" fill="#DA8F22"/>
<path d="M66.4831 39.7879C65.9684 39.5991 65.5726 39.2983 65.6355 39.1267C65.6984 38.9551 66.1605 38.9688 66.7348 39.1015C67.2496 39.2902 67.6454 39.5911 67.5824 39.7627C67.5195 39.9342 67.0557 39.9783 66.4831 39.7879Z" fill="#DA8F22"/>
<path d="M77.208 38.834C76.632 38.7591 76.2345 38.5161 76.2991 38.2867C76.3042 38.1134 76.8276 38.0133 77.3458 38.0865C77.9218 38.1614 78.3193 38.4045 78.2547 38.6338C78.2478 38.8649 77.7822 38.9667 77.208 38.834Z" fill="#DA8F22"/>
<path d="M72.6263 29.5629C72.1556 29.838 71.69 29.9399 71.5779 29.8209C71.4675 29.6442 71.7666 29.3061 72.2391 28.9732C72.7098 28.6981 73.1754 28.5963 73.2875 28.7152C73.3979 28.892 73.0987 29.23 72.6263 29.5629Z" fill="#DA8F22"/>
<path d="M70.8665 34.3098C70.3397 34.5254 69.8758 34.5695 69.8232 34.3944C69.7706 34.2194 70.1275 33.8831 70.5965 33.6657C71.0655 33.4484 71.5871 33.406 71.6397 33.5811C71.7501 33.7578 71.3932 34.0941 70.8665 34.3098Z" fill="#DA8F22"/>
<path d="M75.1898 30.8534C74.663 31.0691 74.1974 31.1709 74.1448 30.9959C74.0344 30.8191 74.3913 30.4828 74.9181 30.2672C75.4449 30.0515 75.9104 29.9497 75.9631 30.1247C76.0174 30.242 75.7183 30.58 75.1898 30.8534Z" fill="#DA8F22"/>
<path d="M75.8449 34.1102C75.3198 34.2681 74.8577 34.2544 74.7473 34.0776C74.6947 33.9026 75.0499 33.6241 75.5766 33.4084C76.1017 33.2505 76.5639 33.2643 76.6743 33.441C76.7829 33.6755 76.37 33.9523 75.8449 34.1102Z" fill="#DA8F22"/>
<path d="M69.0424 31.4805C68.626 31.8729 68.1587 32.0324 68.0483 31.8557C67.9362 31.7367 68.1809 31.2815 68.5956 30.9468C69.012 30.5545 69.4793 30.3949 69.5897 30.5716C69.7018 30.6906 69.4587 31.0881 69.0424 31.4805Z" fill="#DA8F22"/>
<path d="M66.1563 35.2108C65.6295 35.4264 65.1639 35.5283 65.1113 35.3532C65.0009 35.1765 65.3578 34.8402 65.8863 34.5668C66.4131 34.3511 66.8787 34.2493 66.9313 34.4243C66.9839 34.5993 66.6848 34.9374 66.1563 35.2108Z" fill="#DA8F22"/>
<path d="M73.1079 26.9754C72.6355 27.3083 72.1699 27.4101 72.0578 27.2911C71.9474 27.1144 72.2483 26.7186 72.6612 26.4418C73.1336 26.1089 73.5992 26.007 73.7113 26.126C73.8234 26.245 73.5226 26.6408 73.1079 26.9754Z" fill="#DA8F22"/>
<path d="M63.2628 23.6189C63.1318 24.1354 62.887 24.5907 62.7154 24.5278C62.5438 24.4649 62.4998 24.001 62.6307 23.4846C62.7617 22.9681 63.0065 22.5128 63.1781 22.5757C63.3514 22.5808 63.3954 23.0447 63.2628 23.6189Z" fill="#DA8F22"/>
<path d="M65.3819 28.1914C65.1932 28.7062 64.8363 29.0425 64.6647 28.9796C64.4931 28.9167 64.5068 28.4546 64.6973 27.882C64.886 27.3672 65.2429 27.0309 65.4145 27.0938C65.6421 27.2162 65.5707 27.6767 65.3819 28.1914Z" fill="#DA8F22"/>
<path d="M66.007 22.7172C65.8182 23.232 65.5174 23.6278 65.3458 23.5649C65.1742 23.502 65.1879 23.0398 65.3206 22.4655C65.5093 21.9508 65.8102 21.555 65.9818 21.6179C66.2094 21.7403 66.1957 22.2024 66.007 22.7172Z" fill="#DA8F22"/>
<path d="M68.7844 24.5923C68.5379 25.1054 68.181 25.4417 68.0111 25.321C67.8396 25.2581 67.9128 24.7399 68.1576 24.2846C68.4041 23.7716 68.761 23.4352 68.9308 23.5559C69.1024 23.6188 69.0309 24.0793 68.7844 24.5923Z" fill="#DA8F22"/>
<path d="M62.0482 27.5147C62.0311 28.0924 61.8458 28.4916 61.6147 28.4847C61.4414 28.4796 61.2818 28.0123 61.3567 27.4363C61.3739 26.8586 61.5592 26.4594 61.7902 26.4663C61.9618 26.5292 62.1214 26.9965 62.0482 27.5147Z" fill="#DA8F22"/>
<path d="M62.6624 32.1581C62.4736 32.6729 62.1728 33.0687 62.0012 33.0058C61.8296 32.9429 61.8433 32.4807 61.976 31.9065C62.1647 31.3917 62.4656 30.9959 62.6372 31.0588C62.8648 31.1812 62.8511 31.6433 62.6624 32.1581Z" fill="#DA8F22"/>
<path d="M61.7664 21.4353C61.6915 22.0112 61.4484 22.4088 61.2191 22.3441C61.0458 22.339 60.9456 21.8156 61.0188 21.2974C61.0938 20.7214 61.3369 20.3239 61.5662 20.3885C61.7956 20.4532 61.8396 20.917 61.7664 21.4353Z" fill="#DA8F22"/>
<path d="M52.4373 26.0144C52.7124 26.4851 52.8142 26.9507 52.6953 27.0628C52.5185 27.1732 52.1805 26.8741 51.8476 26.4016C51.5725 25.9309 51.4706 25.4653 51.5896 25.3532C51.7663 25.2428 52.1621 25.5437 52.4373 26.0144Z" fill="#DA8F22"/>
<path d="M57.1838 27.7748C57.3994 28.3016 57.4435 28.7655 57.2684 28.8181C57.0934 28.8707 56.7571 28.5138 56.5397 28.0448C56.3241 27.518 56.28 27.0542 56.4551 27.0016C56.6301 26.9489 56.9664 27.3058 57.1838 27.7748Z" fill="#DA8F22"/>
<path d="M53.7277 23.451C53.9433 23.9778 54.0451 24.4434 53.8701 24.496C53.6934 24.6064 53.357 24.2495 53.1414 23.7227C52.9258 23.196 52.8239 22.7304 52.999 22.6778C53.174 22.6251 53.5103 22.982 53.7277 23.451Z" fill="#DA8F22"/>
<path d="M57.041 22.8554C57.1988 23.3805 57.1851 23.8427 57.0084 23.9531C56.8334 24.0057 56.5548 23.6505 56.3392 23.1237C56.1813 22.5986 56.195 22.1365 56.3717 22.0261C56.5485 21.9157 56.827 22.2709 57.041 22.8554Z" fill="#DA8F22"/>
<path d="M54.4107 29.6582C54.803 30.0746 54.9626 30.5418 54.7859 30.6522C54.6669 30.7643 54.2116 30.5196 53.877 30.1049C53.4846 29.6885 53.3251 29.2212 53.5018 29.1108C53.6208 28.9987 54.0183 29.2418 54.4107 29.6582Z" fill="#DA8F22"/>
<path d="M58.085 32.4846C58.3006 33.0114 58.4024 33.477 58.2274 33.5296C58.0507 33.64 57.7144 33.2831 57.4409 32.7546C57.2253 32.2278 57.1235 31.7622 57.2985 31.7096C57.5313 31.6587 57.8676 32.0156 58.085 32.4846Z" fill="#DA8F22"/>
<path d="M49.8478 25.5911C50.1806 26.0635 50.2825 26.5291 50.1635 26.6412C49.9868 26.7516 49.5909 26.4507 49.3141 26.0378C48.9812 25.5654 48.8794 25.0998 48.9984 24.9877C49.1751 24.8773 49.5149 25.1186 49.8478 25.5911Z" fill="#DA8F22"/>
<path d="M46.491 35.4362C47.0075 35.5672 47.4628 35.812 47.3999 35.9836C47.3369 36.1552 46.8731 36.1992 46.3566 36.0682C45.8401 35.9373 45.3848 35.6925 45.4477 35.5209C45.5106 35.3493 45.9745 35.3052 46.491 35.4362Z" fill="#DA8F22"/>
<path d="M51.1217 33.3185C51.6365 33.5072 51.9728 33.8641 51.9099 34.0357C51.847 34.2073 51.3849 34.1936 50.8123 34.0031C50.2975 33.8144 49.9612 33.4575 50.0241 33.2859C50.1465 33.0583 50.6087 33.072 51.1217 33.3185Z" fill="#DA8F22"/>
<path d="M45.6473 32.6937C46.162 32.8825 46.5579 33.1833 46.4949 33.3549C46.432 33.5265 45.9699 33.5128 45.3956 33.3801C44.8808 33.1913 44.485 32.8905 44.5479 32.7189C44.6126 32.4895 45.0747 32.5033 45.6473 32.6937Z" fill="#DA8F22"/>
<path d="M47.4646 29.9145C47.9776 30.161 48.3139 30.5179 48.1933 30.6878C48.1303 30.8593 47.6121 30.7862 47.1569 30.5414C46.6438 30.2949 46.3075 29.9379 46.4282 29.7681C46.4911 29.5965 46.9515 29.668 47.4646 29.9145Z" fill="#DA8F22"/>
<path d="M50.4463 36.5944C51.024 36.6115 51.4232 36.7968 51.4164 37.0279C51.4112 37.2012 50.944 37.3608 50.368 37.2859C49.7903 37.2687 49.391 37.0834 49.3979 36.8523C49.4031 36.679 49.8686 36.5772 50.4463 36.5944Z" fill="#DA8F22"/>
<path d="M55.09 35.9808C55.6048 36.1695 56.0006 36.4704 55.9377 36.6419C55.8748 36.8135 55.4126 36.7998 54.8384 36.6671C54.3236 36.4784 53.9278 36.1776 53.9907 36.006C54.0536 35.8344 54.5752 35.792 55.09 35.9808Z" fill="#DA8F22"/>
<path d="M44.3653 36.934C44.9413 37.0089 45.3388 37.252 45.2742 37.4813C45.269 37.6546 44.7457 37.7547 44.2275 37.6815C43.6515 37.6066 43.254 37.3636 43.3186 37.1342C43.3255 36.9031 43.791 36.8013 44.3653 36.934Z" fill="#DA8F22"/>
<path d="M48.9449 46.264C49.4156 45.9889 49.8812 45.8871 49.9933 46.006C50.1037 46.1828 49.8045 46.5208 49.3321 46.8537C48.8614 47.1288 48.3958 47.2306 48.2837 47.1117C48.175 46.8772 48.4742 46.5391 48.9449 46.264Z" fill="#DA8F22"/>
<path d="M50.7067 41.4593C51.2335 41.2437 51.6973 41.1997 51.7499 41.3747C51.8026 41.5497 51.4457 41.886 50.9767 42.1034C50.4499 42.319 49.986 42.3631 49.9334 42.1881C49.823 42.0113 50.1799 41.675 50.7067 41.4593Z" fill="#DA8F22"/>
<path d="M46.3832 44.9158C46.91 44.7001 47.3756 44.5983 47.4282 44.7733C47.5386 44.9501 47.1817 45.2864 46.6532 45.5598C46.1264 45.7754 45.6608 45.8772 45.6082 45.7022C45.5556 45.5272 45.9125 45.1909 46.3832 44.9158Z" fill="#DA8F22"/>
<path d="M45.7284 41.6582C46.2535 41.5003 46.7156 41.514 46.826 41.6908C46.8786 41.8658 46.5234 42.1443 45.9967 42.36C45.4716 42.5179 45.0095 42.5041 44.8991 42.3274C44.8482 42.0946 45.2033 41.8161 45.7284 41.6582Z" fill="#DA8F22"/>
<path d="M52.5883 44.2906C53.0047 43.8982 53.472 43.7386 53.5824 43.9153C53.6945 44.0343 53.4497 44.4896 53.035 44.8242C52.6186 45.2166 52.1513 45.3762 52.041 45.1994C51.9288 45.0805 52.1141 44.6812 52.5883 44.2906Z" fill="#DA8F22"/>
<path d="M55.4167 40.5582C55.9434 40.3425 56.409 40.2407 56.4616 40.4157C56.572 40.5925 56.2151 40.9288 55.6884 41.1444C55.1616 41.3601 54.696 41.4619 54.6434 41.2869C54.589 41.1696 54.8882 40.8316 55.4167 40.5582Z" fill="#DA8F22"/>
<path d="M48.4652 48.7935C48.9376 48.4606 49.4032 48.3588 49.5153 48.4778C49.6257 48.6545 49.3248 49.0503 48.9119 49.3271C48.4394 49.66 47.9739 49.7619 47.8618 49.6429C47.7497 49.5239 48.0505 49.1281 48.4652 48.7935Z" fill="#DA8F22"/>
<path d="M58.3107 52.1501C58.4434 51.5758 58.6864 51.1783 58.858 51.2412C59.0296 51.3041 59.0737 51.768 58.9427 52.2845C58.8117 52.801 58.5669 53.2563 58.3953 53.1933C58.222 53.1882 58.178 52.7243 58.3107 52.1501Z" fill="#DA8F22"/>
<path d="M56.1915 47.5771C56.3802 47.0624 56.7371 46.726 56.9087 46.789C57.0803 46.8519 57.0649 47.3718 56.8761 47.8866C56.6874 48.4013 56.3305 48.7376 56.1589 48.6747C55.989 48.5541 56.0027 48.0919 56.1915 47.5771Z" fill="#DA8F22"/>
<path d="M55.5662 53.0515C55.755 52.5367 56.0558 52.1409 56.2274 52.2038C56.399 52.2667 56.3853 52.7289 56.2526 53.3031C56.0639 53.8179 55.763 54.2137 55.5914 54.1508C55.4215 54.0301 55.3775 53.5663 55.5662 53.0515Z" fill="#DA8F22"/>
<path d="M52.789 51.1768C53.0355 50.6638 53.3924 50.3275 53.5623 50.4482C53.7339 50.5111 53.6607 51.0293 53.4159 51.4846C53.1694 51.9976 52.8125 52.3339 52.6426 52.2132C52.471 52.1503 52.5425 51.6899 52.789 51.1768Z" fill="#DA8F22"/>
<path d="M59.5249 48.2544C59.5421 47.6768 59.7274 47.2775 59.9584 47.2844C60.1318 47.2895 60.2913 47.7568 60.2164 48.3328C60.1993 48.9105 60.014 49.3097 59.7829 49.3028C59.6113 49.2399 59.4517 48.7726 59.5249 48.2544Z" fill="#DA8F22"/>
<path d="M58.9109 43.6106C59.0996 43.0958 59.4004 42.7 59.572 42.7629C59.7436 42.8258 59.7299 43.288 59.5972 43.8622C59.4085 44.377 59.1076 44.7728 58.936 44.7099C58.7084 44.5875 58.7221 44.1253 58.9109 43.6106Z" fill="#DA8F22"/>
<path d="M59.8068 54.334C59.8818 53.758 60.1249 53.3605 60.3542 53.4251C60.5275 53.4303 60.6276 53.9536 60.5544 54.4718C60.4795 55.0478 60.2364 55.4453 60.0071 55.3807C59.8355 55.3178 59.7336 54.8522 59.8068 54.334Z" fill="#DA8F22"/>
</g>
<g opacity="0.7" filter="url(#filter0_d_65_12941)">
<path d="M38.1695 127.5C24.6174 127.5 18.5424 126.098 16.4061 122.159L15.9388 120.757L15.6717 119.022L15.605 118.621C13.4019 99.5279 12.4673 67.3501 12.1335 51.1277L12.0668 47.5227V46.5213C12 43.2501 12 41.3141 12 41.1138C12 40.8468 12 39.9789 12 39.1778V38.0429C12 37.7091 12 37.0415 12 36.3739L12.0668 33.1695H64.7396L64.8064 36.3739C64.8064 37.0415 64.8064 37.6423 64.8064 38.0429V39.1778C64.8064 40.0457 64.8064 40.9135 64.8064 41.1806C64.8064 41.5144 64.8064 43.5839 64.7396 46.7216L64.6728 53.264L64.6061 53.1972C64.2723 69.8202 63.3377 100.196 61.2014 118.488L60.9343 120.624L60.467 122.092C58.3975 126.031 52.1222 127.5 38.6368 127.5H38.1695Z" fill="white"/>
</g>
<mask id="mask1_65_12941" style="mask-type:alpha" maskUnits="userSpaceOnUse" x="15" y="43" width="47" height="77">
<path opacity="0.9" d="M15.3379 43.7174C15.3379 44.4518 15.3379 45.3197 15.3379 46.321V47.2557C15.6049 61.7424 16.4728 95.1886 18.8094 114.549L18.8761 114.949H18.9429C19.5437 117.152 22.6814 119.088 38.1027 119.088H38.6368C54.1916 119.088 57.2625 117.086 57.8634 114.816L57.9301 114.415C60.2667 95.1219 61.1346 61.8759 61.4016 47.3892H61.4684V46.3878C61.4684 45.3197 61.4684 44.385 61.5351 43.5839H15.3379V43.7174Z" fill="#D9D9D9"/>
</mask>
<g mask="url(#mask1_65_12941)">
<rect x="-0.0167236" y="42.3822" width="79.4432" height="26.7036" ${cols.length > 2 ? 'fill="${cols[2]}"' : 'fill="#FA8585" fill-opacity="0"'}/>
<rect x="-0.0167236" y="69.0858" width="79.4432" height="26.7036" ${cols.length > 1 ? 'fill="${cols[1]}"' : 'fill="#FA8585" fill-opacity="0"'}/>
<rect x="-0.0167236" y="95.7894" width="79.4432" height="26.7036" ${cols.length > 0 ? 'fill="${cols[0]}"' : 'fill="#FA8585" fill-opacity="0"'}/>
</g>
<path opacity="0.2" d="M32.6287 108.474C32.5619 110.61 30.7594 112.279 28.6231 112.212C26.4868 112.145 24.8179 110.343 24.8846 108.207C24.9514 106.07 26.7539 104.401 28.8902 104.468C30.9597 104.535 32.6954 106.337 32.6287 108.474Z" fill="white"/>
<path opacity="0.2" d="M28.7566 98.0593C28.6898 100.73 26.42 102.799 23.8164 102.732C21.1461 102.666 19.0765 100.396 19.1433 97.7923C19.2101 95.1219 21.4799 93.0524 24.0835 93.1191C26.7538 93.1859 28.8234 95.3889 28.7566 98.0593Z" fill="white"/>
<path opacity="0.2" d="M32.3615 88.179C32.2948 89.848 30.8928 91.1831 29.2239 91.1164C27.5549 91.0496 26.2197 89.6477 26.2865 87.9787C26.3532 86.3097 27.7552 84.9745 29.4241 85.0413C31.0931 85.1081 32.4283 86.51 32.3615 88.179Z" fill="white"/>
<path opacity="0.2" d="M26.0862 82.1039C26.0195 83.3056 25.0181 84.307 23.8164 84.2402C22.548 84.1734 21.6134 83.1721 21.6801 81.9036C21.7469 80.702 22.7483 79.7006 23.9499 79.7673C25.1516 79.8341 26.153 80.9023 26.0862 82.1039Z" fill="white"/>
<path opacity="0.2" d="M23.6829 73.759C23.6162 75.0274 22.6148 75.9621 21.3464 75.9621C20.1447 75.8953 19.1433 74.8939 19.2101 73.6255C19.2768 72.4238 20.2782 71.4225 21.5466 71.4892C22.7483 71.4892 23.6829 72.5573 23.6829 73.759Z" fill="white"/>
<path opacity="0.4" d="M24.0165 126.565C26.8204 127.099 30.4921 127.433 35.0985 127.5C31.2264 97.5919 29.8913 51.1944 29.4907 33.1695H18.5422C18.9428 50.9941 20.278 96.6573 24.0165 126.565Z" fill="white"/>
<defs>
<filter id="filter0_d_65_12941" x="11" y="33.1695" width="54.8064" height="102.33" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
<feOffset dy="7"/>
<feGaussianBlur stdDeviation="0.5"/>
<feComposite in2="hardAlpha" operator="out"/>
<feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.25 0"/>
<feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_65_12941"/>
<feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_65_12941" result="shape"/>
</filter>
</defs>
</svg>
''';

      case 'la':
        return '''
<svg width="77" height="136" viewBox="0 0 77 136" fill="none" xmlns="http://www.w3.org/2000/svg">
<mask id="mask0_65_12962" style="mask-type:luminance" maskUnits="userSpaceOnUse" x="38" y="9" width="38" height="40">
<path d="M61.9354 9.93758L38.7789 37.5775L52.0648 48.2524L75.2214 20.6125L61.9354 9.93758Z" fill="white"/>
</mask>
<g mask="url(#mask0_65_12962)">
<path d="M62.2666 17.7771C71.476 16.9368 79.785 23.5344 80.7564 32.5962C81.7425 41.6028 75.0999 49.6286 65.8339 50.4537C56.6245 51.294 48.3154 44.6964 47.3441 35.6347C46.4146 26.6432 53.0424 18.6725 62.2666 17.7771Z" fill="#8AA327"/>
<path d="M62.3577 18.5694C71.1411 17.7331 79.0266 24.099 80.0028 32.6895C80.979 41.28 74.5678 48.8952 65.7844 49.7315C57.0011 50.5678 49.1155 44.2019 48.1393 35.6114C47.2197 27.0361 53.5743 19.4057 62.3577 18.5694Z" fill="#A0BE37"/>
<path d="M62.4216 19.2363C70.8209 18.4743 78.369 24.5136 79.3205 32.743C80.2155 40.9573 74.1342 48.2474 65.7202 49.0645C57.3209 49.8266 49.7728 43.7873 48.8212 35.5578C47.9263 27.3435 54.0224 19.9983 62.4216 19.2363Z" fill="#CDE370"/>
<path d="M49.9664 36.0419C50.4569 39.4222 52.2154 42.3743 54.6781 44.5109L62.729 34.8541L49.9664 36.0419Z" fill="#A0BE37"/>
<path d="M64.8668 35.4861L66.2572 47.968C69.7119 47.5351 72.7109 45.8578 74.8652 43.4815L64.8668 35.4861Z" fill="#A0BE37"/>
<path d="M63.6158 35.6235L55.5649 45.2803C58.1999 47.2269 61.4972 48.2876 64.9496 48.0903L63.6158 35.6235Z" fill="#A0BE37"/>
<path d="M49.8506 34.8886L62.6132 33.7009L52.6147 25.7055C50.6574 28.2527 49.6162 31.4588 49.8506 34.8886Z" fill="#A0BE37"/>
<path d="M63.347 32.7751L61.9566 20.2931C58.5018 20.726 55.5028 22.4034 53.3485 24.7797L63.347 32.7751Z" fill="#A0BE37"/>
<path d="M64.5265 32.6776L72.5775 23.0208C69.9424 21.0742 66.6451 20.0135 63.1361 20.1956L64.5265 32.6776Z" fill="#A0BE37"/>
<path d="M65.4696 33.462L78.2322 32.2742C77.7418 28.894 75.9832 25.9418 73.5205 23.8052L65.4696 33.462Z" fill="#A0BE37"/>
<path d="M65.5856 34.6154L75.584 42.6108C77.5414 40.0637 78.5826 36.8575 78.3334 33.4828L65.5856 34.6154Z" fill="#A0BE37"/>
<path opacity="0.3" d="M69.2089 43.9742C68.9306 43.427 68.7408 42.5492 68.7408 42.5492C68.7408 42.5492 69.4304 43.1475 69.7087 43.6946C69.9871 44.2418 69.9994 44.4223 69.7999 44.487C69.6571 44.5669 69.4872 44.5213 69.2089 43.9742ZM72.6193 43.7066C72.7055 43.6116 72.7646 43.3911 72.272 42.9638C71.8509 42.4965 71.0456 42.1035 71.0456 42.1035C71.0456 42.1035 71.4348 42.9167 71.8559 43.3839C72.2918 43.7961 72.4765 43.7865 72.6193 43.7066ZM70.0286 41.5947C70.1714 41.5149 70.1738 41.2792 69.6813 40.8519C69.2602 40.3846 68.4549 39.9917 68.4549 39.9917C68.4549 39.9917 68.8441 40.8048 69.2652 41.2721C69.7011 41.6842 69.871 41.7297 70.0286 41.5947ZM67.7587 45.5349C67.6084 44.963 67.0912 44.1747 67.0912 44.1747C67.0912 44.1747 67.0396 45.0469 67.1752 45.6739C67.3254 46.2458 67.5372 46.3616 67.6652 46.3369C67.8499 46.3273 67.9509 46.1771 67.7587 45.5349ZM67.352 42.2952C67.2017 41.7233 66.6845 40.935 66.6845 40.935C66.6845 40.935 66.6329 41.8072 66.7684 42.4342C66.9187 43.0061 67.1305 43.1219 67.2585 43.0972C67.4432 43.0876 67.5442 42.9374 67.352 42.2952ZM67.1793 39.768C67.3221 39.6881 67.3664 39.5228 67.0881 38.9757C66.8098 38.4285 66.1202 37.8303 66.1202 37.8303C66.1202 37.8303 66.3099 38.7081 66.5883 39.2552C66.8666 39.8024 67.0365 39.8479 67.1793 39.768ZM59.0711 24.7181C59.3494 25.2652 59.5391 26.1431 59.5391 26.1431C59.5391 26.1431 58.8496 25.5448 58.5712 24.9977C58.2929 24.4505 58.2806 24.27 58.48 24.2053C58.5662 24.1103 58.7928 24.171 59.0711 24.7181ZM55.6606 24.9857C55.5745 25.0807 55.5154 25.3012 56.0079 25.7285C56.4291 26.1958 57.2343 26.5888 57.2343 26.5888C57.2343 26.5888 56.8452 25.7756 56.424 25.3084C55.9881 24.8962 55.7468 24.8906 55.6606 24.9857ZM58.2514 27.0976C58.1086 27.1774 58.1061 27.4131 58.5421 27.8252C58.9632 28.2925 59.7684 28.6855 59.7684 28.6855C59.7684 28.6855 59.3793 27.8723 58.9581 27.4051C58.5789 27.0081 58.3523 26.9474 58.2514 27.0976ZM60.4646 23.1422C60.6149 23.7141 61.1321 24.5024 61.1321 24.5024C61.1321 24.5024 61.1837 23.6302 61.0482 23.0032C60.8979 22.4313 60.6861 22.3155 60.5581 22.3403C60.43 22.365 60.3291 22.5152 60.4646 23.1422ZM60.8713 26.3819C61.0216 26.9538 61.5388 27.7421 61.5388 27.7421C61.5388 27.7421 61.5904 26.8699 61.4549 26.2429C61.3046 25.671 61.0928 25.5552 60.9648 25.5799C60.8368 25.6047 60.7358 25.7549 60.8713 26.3819ZM61.044 28.9091C60.9012 28.989 60.8569 29.1543 61.1352 29.7015C61.4136 30.2486 62.1031 30.8469 62.1031 30.8469C62.1031 30.8469 61.97 29.9842 61.6351 29.4219C61.4134 28.8899 61.1868 28.8292 61.044 28.9091Z" fill="white"/>
<path opacity="0.3" d="M60.9105 44.586C61.0729 43.9798 61.5629 43.2841 61.5629 43.2841C61.5629 43.2841 61.6245 44.1867 61.4621 44.7929C61.2996 45.3992 61.1568 45.479 60.9869 45.4335C60.8318 45.3329 60.6914 45.1771 60.9105 44.586ZM63.5579 46.7131C63.7426 46.7035 63.8435 46.5533 63.8779 45.9718C63.9123 45.3904 63.6093 44.4822 63.6093 44.4822C63.6093 44.4822 63.2597 45.3336 63.282 45.9303C63.2894 46.5821 63.3732 46.7227 63.5579 46.7131ZM63.1512 43.4734C63.3358 43.4638 63.4368 43.3136 63.4712 42.7321C63.5056 42.1506 63.2026 41.2425 63.2026 41.2425C63.2026 41.2425 62.853 42.0939 62.8753 42.6906C62.8827 43.3424 63.0231 43.4981 63.1512 43.4734ZM58.6943 44.701C59.0119 44.1954 59.1915 43.2985 59.1915 43.2985C59.1915 43.2985 58.4898 43.8783 58.1722 44.3839C57.8546 44.8895 57.9236 45.0852 58.0788 45.1859C58.2191 45.3416 58.4186 45.2769 58.6943 44.701ZM60.7649 42.1842C61.0825 41.6786 61.2621 40.7816 61.2621 40.7816C61.2621 40.7816 60.5604 41.3615 60.2428 41.8671C59.9252 42.3727 59.9942 42.5684 60.1493 42.669C60.2478 42.7545 60.4473 42.6898 60.7649 42.1842ZM62.4317 40.268C62.6016 40.3136 62.7444 40.2337 62.9069 39.6274C63.0693 39.0212 63.0077 38.1186 63.0077 38.1186C63.0077 38.1186 62.5029 38.8694 62.3553 39.4206C62.1928 40.0268 62.2618 40.2225 62.4317 40.268ZM67.3693 24.1062C67.2069 24.7125 66.7169 25.4082 66.7169 25.4082C66.7169 25.4082 66.6552 24.5056 66.8029 23.9545C66.9654 23.3482 67.1082 23.2684 67.2781 23.3139C67.448 23.3594 67.5317 23.5 67.3693 24.1062ZM64.6653 21.964C64.4806 21.9736 64.3796 22.1238 64.3452 22.7053C64.3108 23.2867 64.6138 24.1949 64.6138 24.1949C64.6138 24.1949 64.9634 23.3434 64.9412 22.7468C64.9903 22.1102 64.85 21.9544 64.6653 21.964ZM65.072 25.2037C64.8873 25.2133 64.7864 25.3635 64.752 25.945C64.7176 26.5264 65.0206 27.4346 65.0206 27.4346C65.0206 27.4346 65.3701 26.5832 65.3479 25.9865C65.397 25.3499 65.2567 25.1941 65.072 25.2037ZM69.5288 23.976C69.2112 24.4816 69.0316 25.3786 69.0316 25.3786C69.0316 25.3786 69.7333 24.7988 70.0509 24.2932C70.3685 23.7876 70.2995 23.5919 70.1444 23.4912C70.0606 23.3506 69.8612 23.4153 69.5288 23.976ZM67.5149 26.5081C67.1973 27.0137 67.0177 27.9107 67.0177 27.9107C67.0177 27.9107 67.7194 27.3308 68.037 26.8252C68.3545 26.3196 68.2856 26.1239 68.1304 26.0232C68.0319 25.9378 67.8325 26.0025 67.5149 26.5081ZM65.8481 28.4243C65.6781 28.3787 65.5353 28.4586 65.3729 29.0648C65.2104 29.6711 65.2721 30.5737 65.2721 30.5737C65.2721 30.5737 65.7768 29.8229 65.9245 29.2717C66.0869 28.6655 65.9613 28.4546 65.8481 28.4243Z" fill="white"/>
<path opacity="0.3" d="M54.1824 38.8846C54.7389 38.6203 55.6204 38.502 55.6204 38.502C55.6204 38.502 55.0172 39.1674 54.4607 39.4318C53.9043 39.6962 53.7344 39.6506 53.6506 39.5101C53.5816 39.3144 53.6259 39.149 54.1824 38.8846ZM54.4463 42.2042C54.5301 42.3448 54.7714 42.3504 55.2441 41.9454C55.7168 41.5405 56.1649 40.7745 56.1649 40.7745C56.1649 40.7745 55.3376 41.1435 54.8796 41.4933C54.3502 41.8831 54.3478 42.1188 54.4463 42.2042ZM56.5588 39.7577C56.6425 39.8982 56.8838 39.9038 57.3566 39.4989C57.8293 39.0939 58.2774 38.3279 58.2774 38.3279C58.2774 38.3279 57.45 38.6969 56.9921 39.0468C56.5193 39.4517 56.475 39.6171 56.5588 39.7577ZM52.5644 37.4469C53.148 37.3079 53.9482 36.8135 53.9482 36.8135C53.9482 36.8135 53.0691 36.6961 52.4141 36.875C51.8306 37.014 51.673 37.149 51.7419 37.3447C51.769 37.4701 51.9242 37.5707 52.5644 37.4469ZM55.8616 37.149C56.4451 37.01 57.2454 36.5156 57.2454 36.5156C57.2454 36.5156 56.3663 36.3981 55.7113 36.5771C55.1277 36.716 54.9701 36.851 55.0391 37.0467C55.1228 37.1873 55.278 37.2879 55.8616 37.149ZM58.5037 37.03C58.5875 37.1705 58.7574 37.2161 59.3139 36.9517C59.8703 36.6873 60.4736 36.0219 60.4736 36.0219C60.4736 36.0219 59.592 36.1402 59.0356 36.4045C58.4643 36.724 58.42 36.8894 58.5037 37.03ZM73.957 29.6519C73.4005 29.9163 72.519 30.0346 72.519 30.0346C72.519 30.0346 73.1222 29.3692 73.6787 29.1048C74.2352 28.8404 74.4051 28.886 74.4888 29.0265C74.5726 29.1671 74.5283 29.3324 73.957 29.6519ZM73.7079 26.2773C73.6241 26.1367 73.3828 26.1311 72.9101 26.5361C72.4374 26.941 71.9893 27.707 71.9893 27.707C71.9893 27.707 72.8166 27.338 73.2894 26.933C73.804 26.5984 73.7916 26.4178 73.7079 26.2773ZM71.524 28.7637C71.4403 28.6232 71.199 28.6176 70.7262 29.0225C70.2535 29.4275 69.8054 30.1935 69.8054 30.1935C69.8054 30.1935 70.6328 29.8245 71.0907 29.4746C71.6201 29.0848 71.6792 28.8644 71.524 28.7637ZM75.575 31.0897C74.9914 31.2287 74.1912 31.7231 74.1912 31.7231C74.1912 31.7231 75.0703 31.8405 75.7253 31.6616C76.3089 31.5226 76.4665 31.3876 76.3975 31.1919C76.3851 31.0114 76.1586 30.9507 75.575 31.0897ZM72.2212 31.3724C71.6377 31.5114 70.8374 32.0058 70.8374 32.0058C70.8374 32.0058 71.7165 32.1233 72.3715 31.9443C72.9551 31.8054 73.1127 31.6704 73.0437 31.4747C73.0314 31.2942 72.8614 31.2486 72.2212 31.3724ZM69.6505 31.4515C69.5667 31.3109 69.3968 31.2654 68.8403 31.5298C68.2839 31.7942 67.6806 32.4595 67.6806 32.4595C67.6806 32.4595 68.5622 32.3413 69.1186 32.0769C69.6899 31.7574 69.7342 31.5921 69.6505 31.4515Z" fill="white"/>
<path opacity="0.3" d="M53.5558 30.8013C54.1789 30.9682 54.8832 31.5114 54.8832 31.5114C54.8832 31.5114 53.9598 31.5593 53.3515 31.3373C52.7285 31.1703 52.6595 30.9746 52.6891 30.8644C52.8048 30.6591 53.0042 30.5944 53.5558 30.8013ZM51.3572 33.3429C51.3696 33.5234 51.5247 33.6241 52.1206 33.6656C52.7165 33.7071 53.6424 33.4236 53.6424 33.4236C53.6424 33.4236 52.7657 33.0705 52.155 33.0841C51.5591 33.0426 51.4015 33.1776 51.3572 33.3429ZM54.711 33.0601C54.7233 33.2406 54.8785 33.3413 55.4744 33.3828C56.0703 33.4244 56.9961 33.1408 56.9961 33.1408C56.9961 33.1408 56.1195 32.7878 55.5088 32.8013C54.8562 32.7446 54.6987 32.8796 54.711 33.0601ZM53.4645 28.6503C53.9865 28.9674 54.9075 29.1551 54.9075 29.1551C54.9075 29.1551 54.3041 28.4618 53.782 28.1447C53.26 27.8276 53.0605 27.8923 52.9743 27.9873C52.8734 28.1375 52.8857 28.318 53.4645 28.6503ZM56.07 30.707C56.592 31.0241 57.513 31.2118 57.513 31.2118C57.513 31.2118 56.9096 30.5185 56.3876 30.2014C55.8655 29.8843 55.666 29.949 55.5799 30.0441C55.4789 30.1942 55.5479 30.3899 56.07 30.707ZM57.9835 32.4012C57.9392 32.5665 58.0229 32.7071 58.6459 32.874C59.269 33.041 60.1776 33.0481 60.1776 33.0481C60.1776 33.0481 59.4166 32.4898 58.8503 32.3381C58.2272 32.1711 58.0278 32.2358 57.9835 32.4012ZM74.5268 37.72C73.9038 37.553 73.1994 37.0099 73.1994 37.0099C73.1994 37.0099 74.1228 36.962 74.7311 37.184C75.3541 37.351 75.4231 37.5467 75.3936 37.6569C75.3493 37.8222 75.1498 37.8869 74.5268 37.72ZM76.7402 35.1233C76.7278 34.9427 76.5727 34.8421 75.9768 34.8006C75.3809 34.759 74.455 35.0426 74.455 35.0426C74.455 35.0426 75.3317 35.3956 75.9424 35.3821C76.5949 35.4388 76.7525 35.3038 76.7402 35.1233ZM73.443 35.4212C73.4307 35.2407 73.2755 35.1401 72.6796 35.0985C72.0837 35.057 71.1579 35.3405 71.1579 35.3405C71.1579 35.3405 72.0345 35.6936 72.6452 35.68C73.2978 35.7367 73.4554 35.6017 73.443 35.4212ZM74.6896 39.8311C74.1675 39.514 73.2465 39.3263 73.2465 39.3263C73.2465 39.3263 73.8499 40.0196 74.372 40.3367C74.8941 40.6538 75.0935 40.5891 75.1797 40.494C75.2806 40.3439 75.2683 40.1633 74.6896 39.8311ZM72.0841 37.7743C71.562 37.4572 70.641 37.2695 70.641 37.2695C70.641 37.2695 71.2444 37.9628 71.7665 38.2799C72.2885 38.597 72.488 38.5323 72.5742 38.4373C72.6751 38.2871 72.6061 38.0914 72.0841 37.7743ZM70.1139 36.065C70.1582 35.8997 70.0745 35.7591 69.4514 35.5921C68.8284 35.4252 67.9198 35.418 67.9198 35.418C67.9198 35.418 68.6807 35.9763 69.2471 36.1281C69.9268 36.3102 70.0696 36.2303 70.1139 36.065Z" fill="white"/>
</g>
<path d="M23.2821 110.651L20.1445 54.0392C20.011 51.7027 21.8135 50.4342 23.1486 49.4996C24.4171 48.6317 24.9511 48.1644 24.8844 47.4301C24.8176 46.6957 24.2168 46.3619 22.8816 45.6276C21.4797 44.8932 19.5437 43.8251 19.4101 41.4885C19.2766 39.152 21.0791 37.8835 22.4143 36.9489C23.6827 36.081 24.2168 35.6137 24.2168 34.8794C24.15 34.145 23.5492 33.8112 22.214 33.0769C20.8121 32.3425 18.8761 31.2744 18.7425 28.9378C18.609 26.6013 20.4115 25.3328 21.7467 24.3982C23.0151 23.5304 23.5492 23.063 23.4824 22.3287L22.6813 7.10764L25.4852 6.97412L26.3531 22.1952C26.4866 24.5317 24.6841 25.8002 23.3489 26.7348C22.0805 27.6027 21.5464 28.07 21.5464 28.8043C21.6132 29.5387 22.214 29.8725 23.5492 30.6068C24.9511 31.3412 26.8871 32.4093 27.0207 34.7459C27.1542 37.0824 25.3517 38.3509 24.0165 39.2855C22.7481 40.1533 22.214 40.6207 22.2808 41.355C22.3475 42.0894 22.9484 42.4231 24.2835 43.1575C25.6855 43.8918 27.6215 44.96 27.755 47.2966C27.8885 49.6331 26.086 50.9015 24.7509 51.8362C23.4824 52.704 22.9484 53.1714 23.0151 53.9057L26.1528 110.517L23.2821 110.651Z" fill="#DD4F51"/>
<g opacity="0.7" filter="url(#filter0_d_65_12962)">
<path d="M38.1695 127.474C24.6174 127.474 18.5424 126.072 16.4061 122.133L15.9388 120.731L15.6717 118.996L15.605 118.595C13.4019 99.5021 12.4673 67.3242 12.1335 51.1018L12.0668 47.4968V46.4954C12 43.2242 12 41.2882 12 41.0879C12 40.8209 12 39.953 12 39.1519V38.017C12 37.6832 12 37.0156 12 36.348L12.0668 33.1436H64.7396L64.8064 36.348C64.8064 37.0156 64.8064 37.6165 64.8064 38.017V39.1519C64.8064 40.0198 64.8064 40.8877 64.8064 41.1547C64.8064 41.4885 64.8064 43.558 64.7396 46.6957L64.6728 53.2381L64.6061 53.1713C64.2723 69.7943 63.3377 100.17 61.2014 118.462L60.9343 120.598L60.467 122.067C58.3975 126.005 52.1222 127.474 38.6368 127.474H38.1695Z" fill="white"/>
</g>
<mask id="mask1_65_12962" style="mask-type:alpha" maskUnits="userSpaceOnUse" x="15" y="43" width="47" height="77">
<path opacity="0.9" d="M15.338 43.6916C15.338 44.4259 15.338 45.2938 15.338 46.2952V47.2298C15.605 61.7165 16.4729 95.1628 18.8094 114.523L18.8762 114.923H18.9429C19.5438 117.126 22.6814 119.062 38.1028 119.062H38.6368C54.1917 119.062 57.2626 117.06 57.8634 114.79L57.9302 114.389C60.2668 95.096 61.1346 61.85 61.4017 47.3633H61.4684V46.3619C61.4684 45.2938 61.4684 44.3592 61.5352 43.558H15.338V43.6916Z" fill="#D9D9D9"/>
</mask>
<g mask="url(#mask1_65_12962)">
<rect x="-0.0167236" y="42.3563" width="79.4432" height="26.7036" ${cols.length > 2 ? 'fill="${cols[2]}"' : 'fill="#FA8585" fill-opacity="0"'}/>
<rect x="-0.0167236" y="69.0599" width="79.4432" height="26.7036" ${cols.length > 1 ? 'fill="${cols[1]}"' : 'fill="#FA8585" fill-opacity="0"'}/>
<rect x="-0.0167236" y="95.7635" width="79.4432" height="26.7036" ${cols.length > 0 ? 'fill="${cols[0]}"' : 'fill="#FA8585" fill-opacity="0"'}/>
</g>
<path opacity="0.2" d="M32.6287 108.448C32.5619 110.584 30.7594 112.253 28.6231 112.186C26.4868 112.12 24.8179 110.317 24.8846 108.181C24.9514 106.044 26.7539 104.376 28.8902 104.442C30.9597 104.509 32.6954 106.312 32.6287 108.448Z" fill="white"/>
<path opacity="0.2" d="M28.7565 98.0334C28.6898 100.704 26.42 102.773 23.8164 102.707C21.146 102.64 19.0765 100.37 19.1432 97.7663C19.21 95.096 21.4798 93.0265 24.0834 93.0932C26.7538 93.16 28.8233 95.363 28.7565 98.0334Z" fill="white"/>
<path opacity="0.2" d="M32.3615 88.1531C32.2948 89.8221 30.8928 91.1572 29.2239 91.0905C27.5549 91.0237 26.2197 89.6218 26.2865 87.9528C26.3532 86.2838 27.7552 84.9486 29.4241 85.0154C31.0931 85.0822 32.4283 86.4841 32.3615 88.1531Z" fill="white"/>
<path opacity="0.2" d="M26.0862 82.078C26.0195 83.2797 25.0181 84.281 23.8164 84.2143C22.548 84.1475 21.6134 83.1461 21.6801 81.8777C21.7469 80.6761 22.7483 79.6747 23.9499 79.7414C25.1516 79.8082 26.153 80.8763 26.0862 82.078Z" fill="white"/>
<path opacity="0.2" d="M23.6829 73.7331C23.6161 75.0015 22.6147 75.9362 21.3463 75.9362C20.1446 75.8694 19.1432 74.868 19.21 73.5996C19.2768 72.3979 20.2781 71.3965 21.5466 71.4633C22.7482 71.4633 23.6829 72.5314 23.6829 73.7331Z" fill="white"/>
<path opacity="0.4" d="M24.0165 126.539C26.8204 127.074 30.4921 127.407 35.0985 127.474C31.2264 97.5661 29.8913 51.1685 29.4907 33.1436H18.5422C18.9428 50.9683 20.278 96.6314 24.0165 126.539Z" fill="white"/>
<defs>
<filter id="filter0_d_65_12962" x="11" y="33.1436" width="54.8064" height="102.33" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
<feOffset dy="7"/>
<feGaussianBlur stdDeviation="0.5"/>
<feComposite in2="hardAlpha" operator="out"/>
<feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.25 0"/>
<feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_65_12962"/>
<feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_65_12962" result="shape"/>
</filter>
</defs>
</svg>
''';

      default:
        return '';
    }
  }

  void _barPau() {
    showDialog(
      context: context,
      barrierColor: Colors.transparent,
      builder: (context) => BackdropFilter(
        filter: ImageFilter.blur(sigmaX: 10, sigmaY: 10),
        child: IntrinsicHeight(
          child: Material(
            color: Colors.transparent,
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              mainAxisSize: MainAxisSize.min,
              crossAxisAlignment: CrossAxisAlignment.stretch,
              children: [
                Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 43),
                  child: Stack(
                    clipBehavior: Clip.none,
                    children: [
                      Container(
                        padding: EdgeInsets.only(
                          left: 25,
                          top: 37,
                          right: 25,
                          bottom: 41,
                        ),
                        decoration: BoxDecoration(
                          image: DecorationImage(
                              image: AssetImage('assets/mask_fon.png'),
                              filterQuality: FilterQuality.high,
                              fit: BoxFit.cover),
                          gradient: LinearGradient(
                            colors: [
                              Color.fromRGBO(13, 11, 126, 1),
                              Color.fromRGBO(2, 0, 95, 1)
                            ],
                            begin: Alignment.topCenter,
                            end: Alignment.bottomCenter,
                          ),
                          borderRadius: BorderRadius.circular(16),
                        ),
                        child: IntrinsicHeight(
                          child: Column(
                            mainAxisSize: MainAxisSize.max,
                            crossAxisAlignment: CrossAxisAlignment.center,
                            children: [
                              Text(
                                'PAUSE',
                                style: TextStyle(
                                  fontSize: 32,
                                  fontWeight: FontWeight.w400,
                                  color: Colors.white,
                                ),
                              ),
                              SizedBox(
                                height: 49,
                              ),
                              GestureDetector(
                                onTap: () {
                                  Get.back();

                                  barSecLe.value = 0;
                                  barSco.value = 0;
                                  curBut.value = ButilkaModel('em');
                                  _genBut();
                                  schitator.cancel();
                                  schitator = Timer.periodic(
                                      Duration(milliseconds: 1000), (timer) {
                                    if (!barPa) {
                                      barSecLe.value++;
                                    }
                                    if (widget.barSec - barSecLe.value <= 0) {
                                      schitator.cancel();
                                      _barFinal();
                                    }
                                  });
                                },
                                child: Container(
                                  width: double.infinity,
                                  padding: EdgeInsets.symmetric(vertical: 12),
                                  constraints: BoxConstraints(minHeight: 45),
                                  decoration: BoxDecoration(
                                      gradient: LinearGradient(
                                        colors: [
                                          Color.fromRGBO(244, 34, 185, 1),
                                          Color.fromRGBO(163, 23, 90, 1)
                                        ],
                                        begin: Alignment.topCenter,
                                        end: Alignment.bottomCenter,
                                      ),
                                      borderRadius: BorderRadius.circular(8)),
                                  alignment: Alignment.center,
                                  child: Text(
                                    'retry'.toUpperCase(),
                                    style: TextStyle(
                                      fontSize: 20,
                                      fontWeight: FontWeight.w400,
                                      color: Colors.white,
                                    ),
                                  ),
                                ),
                              ),
                              SizedBox(
                                height: 15,
                              ),
                              GestureDetector(
                                onTap: () {
                                  Get.offAll(() => GlaErk());
                                },
                                child: Container(
                                  width: double.infinity,
                                  padding: EdgeInsets.symmetric(vertical: 12),
                                  constraints: BoxConstraints(minHeight: 45),
                                  decoration: BoxDecoration(
                                      gradient: LinearGradient(
                                        colors: [
                                          Color.fromRGBO(119, 80, 174, 1),
                                          Color.fromRGBO(50, 69, 181, 1)
                                        ],
                                        begin: Alignment.topCenter,
                                        end: Alignment.bottomCenter,
                                      ),
                                      borderRadius: BorderRadius.circular(8)),
                                  alignment: Alignment.center,
                                  child: Text(
                                    'menu'.toUpperCase(),
                                    style: TextStyle(
                                      fontSize: 20,
                                      fontWeight: FontWeight.w400,
                                      color: Colors.white,
                                    ),
                                  ),
                                ),
                              ),
                            ],
                          ),
                        ),
                      ),
                      Positioned(
                        right: -11,
                        top: -14,
                        child: GestureDetector(
                          onTap: Get.back,
                          child: Image.asset(
                            'assets/clop.png',
                            filterQuality: FilterQuality.high,
                            height: 39,
                            width: 39,
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    ).then((value) {
      barPa = false;
    });
  }

  void _barFinal() {
    Komorka.komorka!.setInt(widget.barSec.toString(), barSco.value);
    showDialog(
      context: context,
      barrierColor: Colors.transparent,
      builder: (context) => BackdropFilter(
        filter: ImageFilter.blur(sigmaX: 10, sigmaY: 10),
        child: IntrinsicHeight(
          child: Material(
            color: Colors.transparent,
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              mainAxisSize: MainAxisSize.min,
              crossAxisAlignment: CrossAxisAlignment.stretch,
              children: [
                Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 43),
                  child: Stack(
                    clipBehavior: Clip.none,
                    children: [
                      Container(
                        padding: EdgeInsets.only(
                          left: 25,
                          top: 37,
                          right: 25,
                          bottom: 41,
                        ),
                        decoration: BoxDecoration(
                          image: DecorationImage(
                              image: AssetImage('assets/mask_fon.png'),
                              filterQuality: FilterQuality.high,
                              fit: BoxFit.cover),
                          gradient: LinearGradient(
                            colors: [
                              Color.fromRGBO(13, 11, 126, 1),
                              Color.fromRGBO(2, 0, 95, 1)
                            ],
                            begin: Alignment.topCenter,
                            end: Alignment.bottomCenter,
                          ),
                          borderRadius: BorderRadius.circular(16),
                        ),
                        child: IntrinsicHeight(
                          child: Column(
                            mainAxisSize: MainAxisSize.max,
                            crossAxisAlignment: CrossAxisAlignment.center,
                            children: [
                              Text(
                                'score:'.toUpperCase(),
                                style: TextStyle(
                                  fontSize: 32,
                                  fontWeight: FontWeight.w400,
                                  color: Colors.white,
                                ),
                              ),
                              SizedBox(
                                height: 16,
                              ),
                              Text(
                                barSco.toString(),
                                style: TextStyle(
                                  fontSize: 32,
                                  fontWeight: FontWeight.w400,
                                  color: Colors.white,
                                ),
                              ),
                              SizedBox(
                                height: 40,
                              ),
                              GestureDetector(
                                onTap: () {
                                  Get.back();

                                  barSecLe.value = 0;
                                  barSco.value = 0;
                                  curBut.value = ButilkaModel('em');
                                  _genBut();
                                  schitator.cancel();
                                  schitator = Timer.periodic(
                                      Duration(milliseconds: 1000), (timer) {
                                    if (!barPa) {
                                      barSecLe.value++;
                                    }
                                    if (widget.barSec - barSecLe.value <= 0) {
                                      schitator.cancel();
                                      _barFinal();
                                    }
                                  });
                                },
                                child: Container(
                                  width: double.infinity,
                                  padding: EdgeInsets.symmetric(vertical: 12),
                                  constraints: BoxConstraints(minHeight: 45),
                                  decoration: BoxDecoration(
                                      gradient: LinearGradient(
                                        colors: [
                                          Color.fromRGBO(244, 34, 185, 1),
                                          Color.fromRGBO(163, 23, 90, 1)
                                        ],
                                        begin: Alignment.topCenter,
                                        end: Alignment.bottomCenter,
                                      ),
                                      borderRadius: BorderRadius.circular(8)),
                                  alignment: Alignment.center,
                                  child: Text(
                                    'retry'.toUpperCase(),
                                    style: TextStyle(
                                      fontSize: 20,
                                      fontWeight: FontWeight.w400,
                                      color: Colors.white,
                                    ),
                                  ),
                                ),
                              ),
                              SizedBox(
                                height: 15,
                              ),
                              GestureDetector(
                                onTap: () {
                                  Get.offAll(() => GlaErk());
                                },
                                child: Container(
                                  width: double.infinity,
                                  padding: EdgeInsets.symmetric(vertical: 12),
                                  constraints: BoxConstraints(minHeight: 45),
                                  decoration: BoxDecoration(
                                      gradient: LinearGradient(
                                        colors: [
                                          Color.fromRGBO(119, 80, 174, 1),
                                          Color.fromRGBO(50, 69, 181, 1)
                                        ],
                                        begin: Alignment.topCenter,
                                        end: Alignment.bottomCenter,
                                      ),
                                      borderRadius: BorderRadius.circular(8)),
                                  alignment: Alignment.center,
                                  child: Text(
                                    'menu'.toUpperCase(),
                                    style: TextStyle(
                                      fontSize: 20,
                                      fontWeight: FontWeight.w400,
                                      color: Colors.white,
                                    ),
                                  ),
                                ),
                              ),
                            ],
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    ).then((value) {
      barPa = false;
    });
  }

  String get emptyStakan =>
      '''<svg width="77" height="136" viewBox="0 0 77 136" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M23.2821 110.677L20.1445 54.0651C20.011 51.7285 21.8135 50.4601 23.1486 49.5255C24.4171 48.6576 24.9511 48.1903 24.8844 47.456C24.8176 46.7216 24.2168 46.3878 22.8816 45.6535C21.4797 44.9191 19.5437 43.851 19.4101 41.5144C19.2766 39.1778 21.0791 37.9094 22.4143 36.9748C23.6827 36.1069 24.2168 35.6396 24.2168 34.9053C24.15 34.1709 23.5492 33.8371 22.214 33.1028C20.8121 32.3684 18.8761 31.3003 18.7425 28.9637C18.609 26.6271 20.4115 25.3587 21.7467 24.4241C23.0151 23.5562 23.5492 23.0889 23.4824 22.3546L22.6813 7.13352L25.4852 7L26.3531 22.2211C26.4866 24.5576 24.6841 25.826 23.3489 26.7607C22.0805 27.6285 21.5464 28.0958 21.5464 28.8302C21.6132 29.5645 22.214 29.8983 23.5492 30.6327C24.9511 31.367 26.8871 32.4352 27.0207 34.7717C27.1542 37.1083 25.3517 38.3767 24.0165 39.3114C22.7481 40.1792 22.214 40.6465 22.2808 41.3809C22.3475 42.1152 22.9484 42.449 24.2835 43.1834C25.6855 43.9177 27.6215 44.9859 27.755 47.3224C27.8885 49.659 26.086 50.9274 24.7509 51.862C23.4824 52.7299 22.9484 53.1972 23.0151 53.9316L26.1528 110.543L23.2821 110.677Z" fill="#DD4F51"/>
<g opacity="0.7" filter="url(#filter0_d_67_69)">
<path d="M38.1695 127.5C24.6174 127.5 18.5424 126.098 16.4061 122.159L15.9388 120.757L15.6717 119.022L15.605 118.621C13.4019 99.5279 12.4673 67.3501 12.1335 51.1277L12.0668 47.5227V46.5213C12 43.2501 12 41.3141 12 41.1138C12 40.8468 12 39.9789 12 39.1778V38.0429C12 37.7091 12 37.0415 12 36.3739L12.0668 33.1695H64.7396L64.8064 36.3739C64.8064 37.0415 64.8064 37.6423 64.8064 38.0429V39.1778C64.8064 40.0457 64.8064 40.9135 64.8064 41.1806C64.8064 41.5144 64.8064 43.5839 64.7396 46.7216L64.6728 53.264L64.6061 53.1972C64.2723 69.8202 63.3377 100.196 61.2014 118.488L60.9343 120.624L60.467 122.092C58.3975 126.031 52.1222 127.5 38.6368 127.5H38.1695Z" fill="white"/>
</g>
<mask id="mask0_67_69" style="mask-type:alpha" maskUnits="userSpaceOnUse" x="15" y="43" width="47" height="77">
<path opacity="0.9" d="M15.338 43.7174C15.338 44.4518 15.338 45.3197 15.338 46.321V47.2557C15.605 61.7424 16.4729 95.1886 18.8094 114.549L18.8762 114.949H18.9429C19.5438 117.152 22.6814 119.088 38.1028 119.088H38.6368C54.1917 119.088 57.2626 117.086 57.8634 114.816L57.9302 114.415C60.2668 95.1219 61.1346 61.8759 61.4017 47.3892H61.4684V46.3878C61.4684 45.3197 61.4684 44.385 61.5352 43.5839H15.338V43.7174Z" fill="#D9D9D9"/>
</mask>
<g mask="url(#mask0_67_69)">
<rect x="-0.0167236" y="42.3822" width="79.4432" height="26.7036" fill="#FA8585"/>
<rect x="-0.0167236" y="69.0858" width="79.4432" height="26.7036" fill="#7B80FD"/>
<rect x="-0.0167236" y="95.7894" width="79.4432" height="26.7036" fill="#90FCA1"/>
</g>
<path opacity="0.2" d="M32.6287 108.474C32.5619 110.61 30.7594 112.279 28.6231 112.212C26.4868 112.145 24.8179 110.343 24.8846 108.207C24.9514 106.07 26.7539 104.401 28.8902 104.468C30.9597 104.535 32.6954 106.337 32.6287 108.474Z" fill="white"/>
<path opacity="0.2" d="M28.7565 98.0593C28.6898 100.73 26.42 102.799 23.8164 102.732C21.146 102.666 19.0765 100.396 19.1432 97.7922C19.21 95.1219 21.4798 93.0523 24.0834 93.1191C26.7538 93.1859 28.8233 95.3889 28.7565 98.0593Z" fill="white"/>
<path opacity="0.2" d="M32.3615 88.179C32.2948 89.8479 30.8928 91.1831 29.2239 91.1164C27.5549 91.0496 26.2197 89.6477 26.2865 87.9787C26.3532 86.3097 27.7552 84.9745 29.4241 85.0413C31.0931 85.108 32.4283 86.51 32.3615 88.179Z" fill="white"/>
<path opacity="0.2" d="M26.0862 82.1039C26.0195 83.3055 25.0181 84.3069 23.8164 84.2402C22.548 84.1734 21.6134 83.172 21.6801 81.9036C21.7469 80.7019 22.7483 79.7006 23.9499 79.7673C25.1516 79.8341 26.153 80.9022 26.0862 82.1039Z" fill="white"/>
<path opacity="0.2" d="M23.6829 73.759C23.6161 75.0274 22.6147 75.962 21.3463 75.962C20.1446 75.8953 19.1432 74.8939 19.21 73.6255C19.2768 72.4238 20.2781 71.4224 21.5466 71.4892C22.7482 71.4892 23.6829 72.5573 23.6829 73.759Z" fill="white"/>
<path opacity="0.4" d="M24.0165 126.565C26.8204 127.099 30.4921 127.433 35.0985 127.5C31.2264 97.5919 29.8913 51.1944 29.4907 33.1695H18.5422C18.9428 50.9941 20.278 96.6573 24.0165 126.565Z" fill="white"/>
<defs>
<filter id="filter0_d_67_69" x="11" y="33.1695" width="54.8064" height="102.33" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
<feOffset dy="7"/>
<feGaussianBlur stdDeviation="0.5"/>
<feComposite in2="hardAlpha" operator="out"/>
<feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.25 0"/>
<feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_67_69"/>
<feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_67_69" result="shape"/>
</filter>
</defs>
</svg>
''';

  String get orangeStakan => '''
<svg width="77" height="136" viewBox="0 0 77 136" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M23.2822 110.677L20.1445 54.0651C20.011 51.7285 21.8135 50.4601 23.1487 49.5255C24.4171 48.6576 24.9512 48.1903 24.8844 47.456C24.8177 46.7216 24.2168 46.3878 22.8817 45.6535C21.4797 44.9191 19.5437 43.851 19.4102 41.5144C19.2767 39.1778 21.0792 37.9094 22.4143 36.9748C23.6828 36.1069 24.2168 35.6396 24.2168 34.9053C24.1501 34.1709 23.5493 33.8371 22.2141 33.1028C20.8121 32.3684 18.8761 31.3003 18.7426 28.9637C18.6091 26.6271 20.4116 25.3587 21.7468 24.4241C23.0152 23.5562 23.5492 23.0889 23.4825 22.3546L22.6814 7.13352L25.4853 7L26.3531 22.2211C26.4866 24.5576 24.6842 25.826 23.349 26.7607C22.0805 27.6285 21.5465 28.0958 21.5465 28.8302C21.6132 29.5645 22.2141 29.8983 23.5493 30.6327C24.9512 31.367 26.8872 32.4352 27.0207 34.7717C27.1542 37.1083 25.3517 38.3767 24.0166 39.3114C22.7481 40.1792 22.2141 40.6465 22.2808 41.3809C22.3476 42.1152 22.9484 42.449 24.2836 43.1834C25.6855 43.9177 27.6216 44.9859 27.7551 47.3224C27.8886 49.659 26.0861 50.9274 24.7509 51.862C23.4825 52.7299 22.9484 53.1972 23.0152 53.9316L26.1528 110.543L23.2822 110.677Z" fill="#DD4F51"/>
<mask id="mask0_65_12941" style="mask-type:luminance" maskUnits="userSpaceOnUse" x="22" y="0" width="55" height="60">
<path d="M43.1109 59.4371L76.5216 17.3358L55.8784 0.95372L22.4676 43.0551L43.1109 59.4371Z" fill="white"/>
</mask>
<g mask="url(#mask0_65_12941)">
<path d="M46.1087 56.1246C35.828 47.956 34.1312 33.046 42.242 22.7636C50.4106 12.4829 65.3206 10.7861 75.603 18.8969C85.8837 27.0655 87.5805 41.9755 79.4697 52.2579C71.3011 62.5386 56.3911 64.2354 46.1087 56.1246Z" fill="#DA8F22"/>
<path d="M47.2505 54.6555C37.7597 47.1463 36.2036 33.3391 43.711 23.9061C51.2202 14.4153 65.0274 12.8592 74.4604 20.3666C83.9512 27.8758 85.5073 41.683 77.9999 51.116C70.4907 60.6068 56.7413 62.1646 47.2505 54.6555Z" fill="#E5AE42"/>
<path d="M48.3314 53.2997C39.5745 46.3905 38.1591 33.6861 45.0683 24.9291C51.9774 16.1721 64.6819 14.7568 73.4389 21.666C82.1958 28.5751 83.6112 41.2796 76.702 50.0366C69.7351 58.7918 57.0289 60.2649 48.3314 53.2997Z" fill="#EDD77F"/>
<path d="M76.1096 48.573C78.8223 44.8374 79.9942 40.4201 79.6589 36.1315L62.8918 38.0623L76.1096 48.573Z" fill="#E5AE42"/>
<path d="M61.4636 35.5337L71.9743 22.3159C68.2388 19.6032 63.8214 18.4313 59.5328 18.7666L61.4636 35.5337Z" fill="#E5AE42"/>
<path d="M62.707 36.4957L79.4741 34.5649C78.7905 30.3238 76.6559 26.2709 73.2177 23.2779L62.707 36.4957Z" fill="#E5AE42"/>
<path d="M75.0898 49.8149L61.872 39.3042L63.8027 56.0713C68.0421 55.4455 72.095 53.3108 75.0898 49.8149Z" fill="#E5AE42"/>
<path d="M60.3054 39.4891L49.7947 52.7069C53.5303 55.4197 57.9476 56.5916 62.2362 56.2563L60.3054 39.4891Z" fill="#E5AE42"/>
<path d="M59.062 38.5267L42.2948 40.4574C42.9784 44.6986 45.1131 48.7515 48.5513 51.7445L59.062 38.5267Z" fill="#E5AE42"/>
<path d="M58.8787 36.9026L45.6609 26.3919C42.9481 30.1275 41.7763 34.5448 42.1115 38.8334L58.8787 36.9026Z" fill="#E5AE42"/>
<path d="M59.839 35.7169L57.9082 18.9497C53.6671 19.6333 49.6142 21.768 46.6212 25.2061L59.839 35.7169Z" fill="#E5AE42"/>
<path d="M69.1366 49.7536C68.8615 49.2829 68.7597 48.8173 68.8787 48.7052C69.0554 48.5948 69.3934 48.894 69.7263 49.3664C70.0015 49.8371 70.1033 50.3027 69.9843 50.4148C69.8076 50.5252 69.4118 50.2244 69.1366 49.7536Z" fill="#DA8F22"/>
<path d="M64.39 47.994C64.1743 47.4673 64.1303 47.0034 64.3053 46.9508C64.4803 46.8981 64.8166 47.255 65.034 47.724C65.2496 48.2508 65.2937 48.7147 65.1187 48.7673C64.9436 48.8199 64.6073 48.463 64.39 47.994Z" fill="#DA8F22"/>
<path d="M67.8464 52.3174C67.6307 51.7907 67.5289 51.3251 67.7039 51.2724C67.8806 51.1621 68.217 51.519 68.4326 52.0457C68.6483 52.5725 68.7501 53.0381 68.5751 53.0907C68.4 53.1433 68.0637 52.7864 67.8464 52.3174Z" fill="#DA8F22"/>
<path d="M64.5907 52.9144C64.4329 52.3893 64.4466 51.9272 64.6233 51.8168C64.7983 51.7642 65.0769 52.1193 65.2925 52.6461C65.4504 53.1712 65.4367 53.6333 65.26 53.7437C65.0255 53.8524 64.7469 53.4972 64.5907 52.9144Z" fill="#DA8F22"/>
<path d="M67.2209 46.1123C66.8285 45.6959 66.6689 45.2286 66.8457 45.1182C66.9646 45.0061 67.4199 45.2509 67.7546 45.6656C68.1469 46.0819 68.3065 46.5492 68.1298 46.6596C67.953 46.77 67.5555 46.5269 67.2209 46.1123Z" fill="#DA8F22"/>
<path d="M63.4888 43.2841C63.2732 42.7574 63.1713 42.2918 63.3463 42.2392C63.5231 42.1288 63.8594 42.4857 64.1328 43.0142C64.3485 43.5409 64.4503 44.0065 64.2753 44.0592C64.1002 44.1118 63.7062 43.7532 63.4888 43.2841Z" fill="#DA8F22"/>
<path d="M71.726 50.1777C71.3931 49.7053 71.2913 49.2397 71.4102 49.1276C71.587 49.0172 71.9828 49.318 72.2596 49.731C72.5925 50.2034 72.6943 50.669 72.5753 50.7811C72.4564 50.8932 72.0589 50.6501 71.726 50.1777Z" fill="#DA8F22"/>
<path d="M75.0819 40.3324C74.5654 40.2014 74.1102 39.9567 74.1731 39.7851C74.236 39.6135 74.6999 39.5694 75.2163 39.7004C75.7328 39.8313 76.1881 40.0761 76.1252 40.2477C76.1201 40.421 75.5984 40.4634 75.0819 40.3324Z" fill="#DA8F22"/>
<path d="M70.4512 42.4497C69.9364 42.261 69.6001 41.904 69.663 41.7325C69.7259 41.5609 70.1881 41.5746 70.7606 41.765C71.2754 41.9538 71.6117 42.3107 71.5488 42.4823C71.4842 42.7116 70.9643 42.6962 70.4512 42.4497Z" fill="#DA8F22"/>
<path d="M75.9258 43.0749C75.4111 42.8861 75.0153 42.5853 75.0782 42.4137C75.1411 42.2421 75.6032 42.2558 76.1775 42.3885C76.6923 42.5772 77.0881 42.8781 77.0251 43.0497C76.9605 43.279 76.4984 43.2653 75.9258 43.0749Z" fill="#DA8F22"/>
<path d="M74.1085 45.854C73.5955 45.6075 73.2591 45.2506 73.3798 45.0807C73.4427 44.9091 73.9609 44.9823 74.4162 45.2271C74.9293 45.4736 75.2656 45.8305 75.1449 46.0004C75.082 46.172 74.6216 46.1005 74.1085 45.854Z" fill="#DA8F22"/>
<path d="M71.1268 39.1743C70.5491 39.1572 70.1499 38.9719 70.1567 38.7408C70.1619 38.5675 70.6292 38.4079 71.2051 38.4828C71.7828 38.5 72.1821 38.6853 72.1752 38.9164C72.1701 39.0897 71.7045 39.1915 71.1268 39.1743Z" fill="#DA8F22"/>
<path d="M66.4831 39.7879C65.9684 39.5991 65.5726 39.2983 65.6355 39.1267C65.6984 38.9551 66.1605 38.9688 66.7348 39.1015C67.2496 39.2902 67.6454 39.5911 67.5824 39.7627C67.5195 39.9342 67.0557 39.9783 66.4831 39.7879Z" fill="#DA8F22"/>
<path d="M77.208 38.834C76.632 38.7591 76.2345 38.5161 76.2991 38.2867C76.3042 38.1134 76.8276 38.0133 77.3458 38.0865C77.9218 38.1614 78.3193 38.4045 78.2547 38.6338C78.2478 38.8649 77.7822 38.9667 77.208 38.834Z" fill="#DA8F22"/>
<path d="M72.6263 29.5629C72.1556 29.838 71.69 29.9399 71.5779 29.8209C71.4675 29.6442 71.7666 29.3061 72.2391 28.9732C72.7098 28.6981 73.1754 28.5963 73.2875 28.7152C73.3979 28.892 73.0987 29.23 72.6263 29.5629Z" fill="#DA8F22"/>
<path d="M70.8665 34.3098C70.3397 34.5254 69.8758 34.5695 69.8232 34.3944C69.7706 34.2194 70.1275 33.8831 70.5965 33.6657C71.0655 33.4484 71.5871 33.406 71.6397 33.5811C71.7501 33.7578 71.3932 34.0941 70.8665 34.3098Z" fill="#DA8F22"/>
<path d="M75.1898 30.8534C74.663 31.0691 74.1974 31.1709 74.1448 30.9959C74.0344 30.8191 74.3913 30.4828 74.9181 30.2672C75.4449 30.0515 75.9104 29.9497 75.9631 30.1247C76.0174 30.242 75.7183 30.58 75.1898 30.8534Z" fill="#DA8F22"/>
<path d="M75.8449 34.1102C75.3198 34.2681 74.8577 34.2544 74.7473 34.0776C74.6947 33.9026 75.0499 33.6241 75.5766 33.4084C76.1017 33.2505 76.5639 33.2643 76.6743 33.441C76.7829 33.6755 76.37 33.9523 75.8449 34.1102Z" fill="#DA8F22"/>
<path d="M69.0424 31.4805C68.626 31.8729 68.1587 32.0324 68.0483 31.8557C67.9362 31.7367 68.1809 31.2815 68.5956 30.9468C69.012 30.5545 69.4793 30.3949 69.5897 30.5716C69.7018 30.6906 69.4587 31.0881 69.0424 31.4805Z" fill="#DA8F22"/>
<path d="M66.1563 35.2108C65.6295 35.4264 65.1639 35.5283 65.1113 35.3532C65.0009 35.1765 65.3578 34.8402 65.8863 34.5668C66.4131 34.3511 66.8787 34.2493 66.9313 34.4243C66.9839 34.5993 66.6848 34.9374 66.1563 35.2108Z" fill="#DA8F22"/>
<path d="M73.1079 26.9754C72.6355 27.3083 72.1699 27.4101 72.0578 27.2911C71.9474 27.1144 72.2483 26.7186 72.6612 26.4418C73.1336 26.1089 73.5992 26.007 73.7113 26.126C73.8234 26.245 73.5226 26.6408 73.1079 26.9754Z" fill="#DA8F22"/>
<path d="M63.2628 23.6189C63.1318 24.1354 62.887 24.5907 62.7154 24.5278C62.5438 24.4649 62.4998 24.001 62.6307 23.4846C62.7617 22.9681 63.0065 22.5128 63.1781 22.5757C63.3514 22.5808 63.3954 23.0447 63.2628 23.6189Z" fill="#DA8F22"/>
<path d="M65.3819 28.1914C65.1932 28.7062 64.8363 29.0425 64.6647 28.9796C64.4931 28.9167 64.5068 28.4546 64.6973 27.882C64.886 27.3672 65.2429 27.0309 65.4145 27.0938C65.6421 27.2162 65.5707 27.6767 65.3819 28.1914Z" fill="#DA8F22"/>
<path d="M66.007 22.7172C65.8182 23.232 65.5174 23.6278 65.3458 23.5649C65.1742 23.502 65.1879 23.0398 65.3206 22.4655C65.5093 21.9508 65.8102 21.555 65.9818 21.6179C66.2094 21.7403 66.1957 22.2024 66.007 22.7172Z" fill="#DA8F22"/>
<path d="M68.7844 24.5923C68.5379 25.1054 68.181 25.4417 68.0111 25.321C67.8396 25.2581 67.9128 24.7399 68.1576 24.2846C68.4041 23.7716 68.761 23.4352 68.9308 23.5559C69.1024 23.6188 69.0309 24.0793 68.7844 24.5923Z" fill="#DA8F22"/>
<path d="M62.0482 27.5147C62.0311 28.0924 61.8458 28.4916 61.6147 28.4847C61.4414 28.4796 61.2818 28.0123 61.3567 27.4363C61.3739 26.8586 61.5592 26.4594 61.7902 26.4663C61.9618 26.5292 62.1214 26.9965 62.0482 27.5147Z" fill="#DA8F22"/>
<path d="M62.6624 32.1581C62.4736 32.6729 62.1728 33.0687 62.0012 33.0058C61.8296 32.9429 61.8433 32.4807 61.976 31.9065C62.1647 31.3917 62.4656 30.9959 62.6372 31.0588C62.8648 31.1812 62.8511 31.6433 62.6624 32.1581Z" fill="#DA8F22"/>
<path d="M61.7664 21.4353C61.6915 22.0112 61.4484 22.4088 61.2191 22.3441C61.0458 22.339 60.9456 21.8156 61.0188 21.2974C61.0938 20.7214 61.3369 20.3239 61.5662 20.3885C61.7956 20.4532 61.8396 20.917 61.7664 21.4353Z" fill="#DA8F22"/>
<path d="M52.4373 26.0144C52.7124 26.4851 52.8142 26.9507 52.6953 27.0628C52.5185 27.1732 52.1805 26.8741 51.8476 26.4016C51.5725 25.9309 51.4706 25.4653 51.5896 25.3532C51.7663 25.2428 52.1621 25.5437 52.4373 26.0144Z" fill="#DA8F22"/>
<path d="M57.1838 27.7748C57.3994 28.3016 57.4435 28.7655 57.2684 28.8181C57.0934 28.8707 56.7571 28.5138 56.5397 28.0448C56.3241 27.518 56.28 27.0542 56.4551 27.0016C56.6301 26.9489 56.9664 27.3058 57.1838 27.7748Z" fill="#DA8F22"/>
<path d="M53.7277 23.451C53.9433 23.9778 54.0451 24.4434 53.8701 24.496C53.6934 24.6064 53.357 24.2495 53.1414 23.7227C52.9258 23.196 52.8239 22.7304 52.999 22.6778C53.174 22.6251 53.5103 22.982 53.7277 23.451Z" fill="#DA8F22"/>
<path d="M57.041 22.8554C57.1988 23.3805 57.1851 23.8427 57.0084 23.9531C56.8334 24.0057 56.5548 23.6505 56.3392 23.1237C56.1813 22.5986 56.195 22.1365 56.3717 22.0261C56.5485 21.9157 56.827 22.2709 57.041 22.8554Z" fill="#DA8F22"/>
<path d="M54.4107 29.6582C54.803 30.0746 54.9626 30.5418 54.7859 30.6522C54.6669 30.7643 54.2116 30.5196 53.877 30.1049C53.4846 29.6885 53.3251 29.2212 53.5018 29.1108C53.6208 28.9987 54.0183 29.2418 54.4107 29.6582Z" fill="#DA8F22"/>
<path d="M58.085 32.4846C58.3006 33.0114 58.4024 33.477 58.2274 33.5296C58.0507 33.64 57.7144 33.2831 57.4409 32.7546C57.2253 32.2278 57.1235 31.7622 57.2985 31.7096C57.5313 31.6587 57.8676 32.0156 58.085 32.4846Z" fill="#DA8F22"/>
<path d="M49.8478 25.5911C50.1806 26.0635 50.2825 26.5291 50.1635 26.6412C49.9868 26.7516 49.5909 26.4507 49.3141 26.0378C48.9812 25.5654 48.8794 25.0998 48.9984 24.9877C49.1751 24.8773 49.5149 25.1186 49.8478 25.5911Z" fill="#DA8F22"/>
<path d="M46.491 35.4362C47.0075 35.5672 47.4628 35.812 47.3999 35.9836C47.3369 36.1552 46.8731 36.1992 46.3566 36.0682C45.8401 35.9373 45.3848 35.6925 45.4477 35.5209C45.5106 35.3493 45.9745 35.3052 46.491 35.4362Z" fill="#DA8F22"/>
<path d="M51.1217 33.3185C51.6365 33.5072 51.9728 33.8641 51.9099 34.0357C51.847 34.2073 51.3849 34.1936 50.8123 34.0031C50.2975 33.8144 49.9612 33.4575 50.0241 33.2859C50.1465 33.0583 50.6087 33.072 51.1217 33.3185Z" fill="#DA8F22"/>
<path d="M45.6473 32.6937C46.162 32.8825 46.5579 33.1833 46.4949 33.3549C46.432 33.5265 45.9699 33.5128 45.3956 33.3801C44.8808 33.1913 44.485 32.8905 44.5479 32.7189C44.6126 32.4895 45.0747 32.5033 45.6473 32.6937Z" fill="#DA8F22"/>
<path d="M47.4646 29.9145C47.9776 30.161 48.3139 30.5179 48.1933 30.6878C48.1303 30.8593 47.6121 30.7862 47.1569 30.5414C46.6438 30.2949 46.3075 29.9379 46.4282 29.7681C46.4911 29.5965 46.9515 29.668 47.4646 29.9145Z" fill="#DA8F22"/>
<path d="M50.4463 36.5944C51.024 36.6115 51.4232 36.7968 51.4164 37.0279C51.4112 37.2012 50.944 37.3608 50.368 37.2859C49.7903 37.2687 49.391 37.0834 49.3979 36.8523C49.4031 36.679 49.8686 36.5772 50.4463 36.5944Z" fill="#DA8F22"/>
<path d="M55.09 35.9808C55.6048 36.1695 56.0006 36.4704 55.9377 36.6419C55.8748 36.8135 55.4126 36.7998 54.8384 36.6671C54.3236 36.4784 53.9278 36.1776 53.9907 36.006C54.0536 35.8344 54.5752 35.792 55.09 35.9808Z" fill="#DA8F22"/>
<path d="M44.3653 36.934C44.9413 37.0089 45.3388 37.252 45.2742 37.4813C45.269 37.6546 44.7457 37.7547 44.2275 37.6815C43.6515 37.6066 43.254 37.3636 43.3186 37.1342C43.3255 36.9031 43.791 36.8013 44.3653 36.934Z" fill="#DA8F22"/>
<path d="M48.9449 46.264C49.4156 45.9889 49.8812 45.8871 49.9933 46.006C50.1037 46.1828 49.8045 46.5208 49.3321 46.8537C48.8614 47.1288 48.3958 47.2306 48.2837 47.1117C48.175 46.8772 48.4742 46.5391 48.9449 46.264Z" fill="#DA8F22"/>
<path d="M50.7067 41.4593C51.2335 41.2437 51.6973 41.1997 51.7499 41.3747C51.8026 41.5497 51.4457 41.886 50.9767 42.1034C50.4499 42.319 49.986 42.3631 49.9334 42.1881C49.823 42.0113 50.1799 41.675 50.7067 41.4593Z" fill="#DA8F22"/>
<path d="M46.3832 44.9158C46.91 44.7001 47.3756 44.5983 47.4282 44.7733C47.5386 44.9501 47.1817 45.2864 46.6532 45.5598C46.1264 45.7754 45.6608 45.8772 45.6082 45.7022C45.5556 45.5272 45.9125 45.1909 46.3832 44.9158Z" fill="#DA8F22"/>
<path d="M45.7284 41.6582C46.2535 41.5003 46.7156 41.514 46.826 41.6908C46.8786 41.8658 46.5234 42.1443 45.9967 42.36C45.4716 42.5179 45.0095 42.5041 44.8991 42.3274C44.8482 42.0946 45.2033 41.8161 45.7284 41.6582Z" fill="#DA8F22"/>
<path d="M52.5883 44.2906C53.0047 43.8982 53.472 43.7386 53.5824 43.9153C53.6945 44.0343 53.4497 44.4896 53.035 44.8242C52.6186 45.2166 52.1513 45.3762 52.041 45.1994C51.9288 45.0805 52.1141 44.6812 52.5883 44.2906Z" fill="#DA8F22"/>
<path d="M55.4167 40.5582C55.9434 40.3425 56.409 40.2407 56.4616 40.4157C56.572 40.5925 56.2151 40.9288 55.6884 41.1444C55.1616 41.3601 54.696 41.4619 54.6434 41.2869C54.589 41.1696 54.8882 40.8316 55.4167 40.5582Z" fill="#DA8F22"/>
<path d="M48.4652 48.7935C48.9376 48.4606 49.4032 48.3588 49.5153 48.4778C49.6257 48.6545 49.3248 49.0503 48.9119 49.3271C48.4394 49.66 47.9739 49.7619 47.8618 49.6429C47.7497 49.5239 48.0505 49.1281 48.4652 48.7935Z" fill="#DA8F22"/>
<path d="M58.3107 52.1501C58.4434 51.5758 58.6864 51.1783 58.858 51.2412C59.0296 51.3041 59.0737 51.768 58.9427 52.2845C58.8117 52.801 58.5669 53.2563 58.3953 53.1933C58.222 53.1882 58.178 52.7243 58.3107 52.1501Z" fill="#DA8F22"/>
<path d="M56.1915 47.5771C56.3802 47.0624 56.7371 46.726 56.9087 46.789C57.0803 46.8519 57.0649 47.3718 56.8761 47.8866C56.6874 48.4013 56.3305 48.7376 56.1589 48.6747C55.989 48.5541 56.0027 48.0919 56.1915 47.5771Z" fill="#DA8F22"/>
<path d="M55.5662 53.0515C55.755 52.5367 56.0558 52.1409 56.2274 52.2038C56.399 52.2667 56.3853 52.7289 56.2526 53.3031C56.0639 53.8179 55.763 54.2137 55.5914 54.1508C55.4215 54.0301 55.3775 53.5663 55.5662 53.0515Z" fill="#DA8F22"/>
<path d="M52.789 51.1768C53.0355 50.6638 53.3924 50.3275 53.5623 50.4482C53.7339 50.5111 53.6607 51.0293 53.4159 51.4846C53.1694 51.9976 52.8125 52.3339 52.6426 52.2132C52.471 52.1503 52.5425 51.6899 52.789 51.1768Z" fill="#DA8F22"/>
<path d="M59.5249 48.2544C59.5421 47.6768 59.7274 47.2775 59.9584 47.2844C60.1318 47.2895 60.2913 47.7568 60.2164 48.3328C60.1993 48.9105 60.014 49.3097 59.7829 49.3028C59.6113 49.2399 59.4517 48.7726 59.5249 48.2544Z" fill="#DA8F22"/>
<path d="M58.9109 43.6106C59.0996 43.0958 59.4004 42.7 59.572 42.7629C59.7436 42.8258 59.7299 43.288 59.5972 43.8622C59.4085 44.377 59.1076 44.7728 58.936 44.7099C58.7084 44.5875 58.7221 44.1253 58.9109 43.6106Z" fill="#DA8F22"/>
<path d="M59.8068 54.334C59.8818 53.758 60.1249 53.3605 60.3542 53.4251C60.5275 53.4303 60.6276 53.9536 60.5544 54.4718C60.4795 55.0478 60.2364 55.4453 60.0071 55.3807C59.8355 55.3178 59.7336 54.8522 59.8068 54.334Z" fill="#DA8F22"/>
</g>
<g opacity="0.7" filter="url(#filter0_d_65_12941)">
<path d="M38.1695 127.5C24.6174 127.5 18.5424 126.098 16.4061 122.159L15.9388 120.757L15.6717 119.022L15.605 118.621C13.4019 99.5279 12.4673 67.3501 12.1335 51.1277L12.0668 47.5227V46.5213C12 43.2501 12 41.3141 12 41.1138C12 40.8468 12 39.9789 12 39.1778V38.0429C12 37.7091 12 37.0415 12 36.3739L12.0668 33.1695H64.7396L64.8064 36.3739C64.8064 37.0415 64.8064 37.6423 64.8064 38.0429V39.1778C64.8064 40.0457 64.8064 40.9135 64.8064 41.1806C64.8064 41.5144 64.8064 43.5839 64.7396 46.7216L64.6728 53.264L64.6061 53.1972C64.2723 69.8202 63.3377 100.196 61.2014 118.488L60.9343 120.624L60.467 122.092C58.3975 126.031 52.1222 127.5 38.6368 127.5H38.1695Z" fill="white"/>
</g>
<mask id="mask1_65_12941" style="mask-type:alpha" maskUnits="userSpaceOnUse" x="15" y="43" width="47" height="77">
<path opacity="0.9" d="M15.3379 43.7174C15.3379 44.4518 15.3379 45.3197 15.3379 46.321V47.2557C15.6049 61.7424 16.4728 95.1886 18.8094 114.549L18.8761 114.949H18.9429C19.5437 117.152 22.6814 119.088 38.1027 119.088H38.6368C54.1916 119.088 57.2625 117.086 57.8634 114.816L57.9301 114.415C60.2667 95.1219 61.1346 61.8759 61.4016 47.3892H61.4684V46.3878C61.4684 45.3197 61.4684 44.385 61.5351 43.5839H15.3379V43.7174Z" fill="#D9D9D9"/>
</mask>
<g mask="url(#mask1_65_12941)">
<rect x="-0.0167236" y="42.3822" width="79.4432" height="26.7036" fill="#FA8585"/>
<rect x="-0.0167236" y="69.0858" width="79.4432" height="26.7036" fill="#7B80FD"/>
<rect x="-0.0167236" y="95.7894" width="79.4432" height="26.7036" fill="#90FCA1"/>
</g>
<path opacity="0.2" d="M32.6287 108.474C32.5619 110.61 30.7594 112.279 28.6231 112.212C26.4868 112.145 24.8179 110.343 24.8846 108.207C24.9514 106.07 26.7539 104.401 28.8902 104.468C30.9597 104.535 32.6954 106.337 32.6287 108.474Z" fill="white"/>
<path opacity="0.2" d="M28.7566 98.0593C28.6898 100.73 26.42 102.799 23.8164 102.732C21.1461 102.666 19.0765 100.396 19.1433 97.7923C19.2101 95.1219 21.4799 93.0524 24.0835 93.1191C26.7538 93.1859 28.8234 95.3889 28.7566 98.0593Z" fill="white"/>
<path opacity="0.2" d="M32.3615 88.179C32.2948 89.848 30.8928 91.1831 29.2239 91.1164C27.5549 91.0496 26.2197 89.6477 26.2865 87.9787C26.3532 86.3097 27.7552 84.9745 29.4241 85.0413C31.0931 85.1081 32.4283 86.51 32.3615 88.179Z" fill="white"/>
<path opacity="0.2" d="M26.0862 82.1039C26.0195 83.3056 25.0181 84.307 23.8164 84.2402C22.548 84.1734 21.6134 83.1721 21.6801 81.9036C21.7469 80.702 22.7483 79.7006 23.9499 79.7673C25.1516 79.8341 26.153 80.9023 26.0862 82.1039Z" fill="white"/>
<path opacity="0.2" d="M23.6829 73.759C23.6162 75.0274 22.6148 75.9621 21.3464 75.9621C20.1447 75.8953 19.1433 74.8939 19.2101 73.6255C19.2768 72.4238 20.2782 71.4225 21.5466 71.4892C22.7483 71.4892 23.6829 72.5573 23.6829 73.759Z" fill="white"/>
<path opacity="0.4" d="M24.0165 126.565C26.8204 127.099 30.4921 127.433 35.0985 127.5C31.2264 97.5919 29.8913 51.1944 29.4907 33.1695H18.5422C18.9428 50.9941 20.278 96.6573 24.0165 126.565Z" fill="white"/>
<defs>
<filter id="filter0_d_65_12941" x="11" y="33.1695" width="54.8064" height="102.33" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
<feOffset dy="7"/>
<feGaussianBlur stdDeviation="0.5"/>
<feComposite in2="hardAlpha" operator="out"/>
<feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.25 0"/>
<feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_65_12941"/>
<feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_65_12941" result="shape"/>
</filter>
</defs>
</svg>
''';

  String get laimStakan => '''
<svg width="77" height="136" viewBox="0 0 77 136" fill="none" xmlns="http://www.w3.org/2000/svg">
<mask id="mask0_65_12962" style="mask-type:luminance" maskUnits="userSpaceOnUse" x="38" y="9" width="38" height="40">
<path d="M61.9354 9.93758L38.7789 37.5775L52.0648 48.2524L75.2214 20.6125L61.9354 9.93758Z" fill="white"/>
</mask>
<g mask="url(#mask0_65_12962)">
<path d="M62.2666 17.7771C71.476 16.9368 79.785 23.5344 80.7564 32.5962C81.7425 41.6028 75.0999 49.6286 65.8339 50.4537C56.6245 51.294 48.3154 44.6964 47.3441 35.6347C46.4146 26.6432 53.0424 18.6725 62.2666 17.7771Z" fill="#8AA327"/>
<path d="M62.3577 18.5694C71.1411 17.7331 79.0266 24.099 80.0028 32.6895C80.979 41.28 74.5678 48.8952 65.7844 49.7315C57.0011 50.5678 49.1155 44.2019 48.1393 35.6114C47.2197 27.0361 53.5743 19.4057 62.3577 18.5694Z" fill="#A0BE37"/>
<path d="M62.4216 19.2363C70.8209 18.4743 78.369 24.5136 79.3205 32.743C80.2155 40.9573 74.1342 48.2474 65.7202 49.0645C57.3209 49.8266 49.7728 43.7873 48.8212 35.5578C47.9263 27.3435 54.0224 19.9983 62.4216 19.2363Z" fill="#CDE370"/>
<path d="M49.9664 36.0419C50.4569 39.4222 52.2154 42.3743 54.6781 44.5109L62.729 34.8541L49.9664 36.0419Z" fill="#A0BE37"/>
<path d="M64.8668 35.4861L66.2572 47.968C69.7119 47.5351 72.7109 45.8578 74.8652 43.4815L64.8668 35.4861Z" fill="#A0BE37"/>
<path d="M63.6158 35.6235L55.5649 45.2803C58.1999 47.2269 61.4972 48.2876 64.9496 48.0903L63.6158 35.6235Z" fill="#A0BE37"/>
<path d="M49.8506 34.8886L62.6132 33.7009L52.6147 25.7055C50.6574 28.2527 49.6162 31.4588 49.8506 34.8886Z" fill="#A0BE37"/>
<path d="M63.347 32.7751L61.9566 20.2931C58.5018 20.726 55.5028 22.4034 53.3485 24.7797L63.347 32.7751Z" fill="#A0BE37"/>
<path d="M64.5265 32.6776L72.5775 23.0208C69.9424 21.0742 66.6451 20.0135 63.1361 20.1956L64.5265 32.6776Z" fill="#A0BE37"/>
<path d="M65.4696 33.462L78.2322 32.2742C77.7418 28.894 75.9832 25.9418 73.5205 23.8052L65.4696 33.462Z" fill="#A0BE37"/>
<path d="M65.5856 34.6154L75.584 42.6108C77.5414 40.0637 78.5826 36.8575 78.3334 33.4828L65.5856 34.6154Z" fill="#A0BE37"/>
<path opacity="0.3" d="M69.2089 43.9742C68.9306 43.427 68.7408 42.5492 68.7408 42.5492C68.7408 42.5492 69.4304 43.1475 69.7087 43.6946C69.9871 44.2418 69.9994 44.4223 69.7999 44.487C69.6571 44.5669 69.4872 44.5213 69.2089 43.9742ZM72.6193 43.7066C72.7055 43.6116 72.7646 43.3911 72.272 42.9638C71.8509 42.4965 71.0456 42.1035 71.0456 42.1035C71.0456 42.1035 71.4348 42.9167 71.8559 43.3839C72.2918 43.7961 72.4765 43.7865 72.6193 43.7066ZM70.0286 41.5947C70.1714 41.5149 70.1738 41.2792 69.6813 40.8519C69.2602 40.3846 68.4549 39.9917 68.4549 39.9917C68.4549 39.9917 68.8441 40.8048 69.2652 41.2721C69.7011 41.6842 69.871 41.7297 70.0286 41.5947ZM67.7587 45.5349C67.6084 44.963 67.0912 44.1747 67.0912 44.1747C67.0912 44.1747 67.0396 45.0469 67.1752 45.6739C67.3254 46.2458 67.5372 46.3616 67.6652 46.3369C67.8499 46.3273 67.9509 46.1771 67.7587 45.5349ZM67.352 42.2952C67.2017 41.7233 66.6845 40.935 66.6845 40.935C66.6845 40.935 66.6329 41.8072 66.7684 42.4342C66.9187 43.0061 67.1305 43.1219 67.2585 43.0972C67.4432 43.0876 67.5442 42.9374 67.352 42.2952ZM67.1793 39.768C67.3221 39.6881 67.3664 39.5228 67.0881 38.9757C66.8098 38.4285 66.1202 37.8303 66.1202 37.8303C66.1202 37.8303 66.3099 38.7081 66.5883 39.2552C66.8666 39.8024 67.0365 39.8479 67.1793 39.768ZM59.0711 24.7181C59.3494 25.2652 59.5391 26.1431 59.5391 26.1431C59.5391 26.1431 58.8496 25.5448 58.5712 24.9977C58.2929 24.4505 58.2806 24.27 58.48 24.2053C58.5662 24.1103 58.7928 24.171 59.0711 24.7181ZM55.6606 24.9857C55.5745 25.0807 55.5154 25.3012 56.0079 25.7285C56.4291 26.1958 57.2343 26.5888 57.2343 26.5888C57.2343 26.5888 56.8452 25.7756 56.424 25.3084C55.9881 24.8962 55.7468 24.8906 55.6606 24.9857ZM58.2514 27.0976C58.1086 27.1774 58.1061 27.4131 58.5421 27.8252C58.9632 28.2925 59.7684 28.6855 59.7684 28.6855C59.7684 28.6855 59.3793 27.8723 58.9581 27.4051C58.5789 27.0081 58.3523 26.9474 58.2514 27.0976ZM60.4646 23.1422C60.6149 23.7141 61.1321 24.5024 61.1321 24.5024C61.1321 24.5024 61.1837 23.6302 61.0482 23.0032C60.8979 22.4313 60.6861 22.3155 60.5581 22.3403C60.43 22.365 60.3291 22.5152 60.4646 23.1422ZM60.8713 26.3819C61.0216 26.9538 61.5388 27.7421 61.5388 27.7421C61.5388 27.7421 61.5904 26.8699 61.4549 26.2429C61.3046 25.671 61.0928 25.5552 60.9648 25.5799C60.8368 25.6047 60.7358 25.7549 60.8713 26.3819ZM61.044 28.9091C60.9012 28.989 60.8569 29.1543 61.1352 29.7015C61.4136 30.2486 62.1031 30.8469 62.1031 30.8469C62.1031 30.8469 61.97 29.9842 61.6351 29.4219C61.4134 28.8899 61.1868 28.8292 61.044 28.9091Z" fill="white"/>
<path opacity="0.3" d="M60.9105 44.586C61.0729 43.9798 61.5629 43.2841 61.5629 43.2841C61.5629 43.2841 61.6245 44.1867 61.4621 44.7929C61.2996 45.3992 61.1568 45.479 60.9869 45.4335C60.8318 45.3329 60.6914 45.1771 60.9105 44.586ZM63.5579 46.7131C63.7426 46.7035 63.8435 46.5533 63.8779 45.9718C63.9123 45.3904 63.6093 44.4822 63.6093 44.4822C63.6093 44.4822 63.2597 45.3336 63.282 45.9303C63.2894 46.5821 63.3732 46.7227 63.5579 46.7131ZM63.1512 43.4734C63.3358 43.4638 63.4368 43.3136 63.4712 42.7321C63.5056 42.1506 63.2026 41.2425 63.2026 41.2425C63.2026 41.2425 62.853 42.0939 62.8753 42.6906C62.8827 43.3424 63.0231 43.4981 63.1512 43.4734ZM58.6943 44.701C59.0119 44.1954 59.1915 43.2985 59.1915 43.2985C59.1915 43.2985 58.4898 43.8783 58.1722 44.3839C57.8546 44.8895 57.9236 45.0852 58.0788 45.1859C58.2191 45.3416 58.4186 45.2769 58.6943 44.701ZM60.7649 42.1842C61.0825 41.6786 61.2621 40.7816 61.2621 40.7816C61.2621 40.7816 60.5604 41.3615 60.2428 41.8671C59.9252 42.3727 59.9942 42.5684 60.1493 42.669C60.2478 42.7545 60.4473 42.6898 60.7649 42.1842ZM62.4317 40.268C62.6016 40.3136 62.7444 40.2337 62.9069 39.6274C63.0693 39.0212 63.0077 38.1186 63.0077 38.1186C63.0077 38.1186 62.5029 38.8694 62.3553 39.4206C62.1928 40.0268 62.2618 40.2225 62.4317 40.268ZM67.3693 24.1062C67.2069 24.7125 66.7169 25.4082 66.7169 25.4082C66.7169 25.4082 66.6552 24.5056 66.8029 23.9545C66.9654 23.3482 67.1082 23.2684 67.2781 23.3139C67.448 23.3594 67.5317 23.5 67.3693 24.1062ZM64.6653 21.964C64.4806 21.9736 64.3796 22.1238 64.3452 22.7053C64.3108 23.2867 64.6138 24.1949 64.6138 24.1949C64.6138 24.1949 64.9634 23.3434 64.9412 22.7468C64.9903 22.1102 64.85 21.9544 64.6653 21.964ZM65.072 25.2037C64.8873 25.2133 64.7864 25.3635 64.752 25.945C64.7176 26.5264 65.0206 27.4346 65.0206 27.4346C65.0206 27.4346 65.3701 26.5832 65.3479 25.9865C65.397 25.3499 65.2567 25.1941 65.072 25.2037ZM69.5288 23.976C69.2112 24.4816 69.0316 25.3786 69.0316 25.3786C69.0316 25.3786 69.7333 24.7988 70.0509 24.2932C70.3685 23.7876 70.2995 23.5919 70.1444 23.4912C70.0606 23.3506 69.8612 23.4153 69.5288 23.976ZM67.5149 26.5081C67.1973 27.0137 67.0177 27.9107 67.0177 27.9107C67.0177 27.9107 67.7194 27.3308 68.037 26.8252C68.3545 26.3196 68.2856 26.1239 68.1304 26.0232C68.0319 25.9378 67.8325 26.0025 67.5149 26.5081ZM65.8481 28.4243C65.6781 28.3787 65.5353 28.4586 65.3729 29.0648C65.2104 29.6711 65.2721 30.5737 65.2721 30.5737C65.2721 30.5737 65.7768 29.8229 65.9245 29.2717C66.0869 28.6655 65.9613 28.4546 65.8481 28.4243Z" fill="white"/>
<path opacity="0.3" d="M54.1824 38.8846C54.7389 38.6203 55.6204 38.502 55.6204 38.502C55.6204 38.502 55.0172 39.1674 54.4607 39.4318C53.9043 39.6962 53.7344 39.6506 53.6506 39.5101C53.5816 39.3144 53.6259 39.149 54.1824 38.8846ZM54.4463 42.2042C54.5301 42.3448 54.7714 42.3504 55.2441 41.9454C55.7168 41.5405 56.1649 40.7745 56.1649 40.7745C56.1649 40.7745 55.3376 41.1435 54.8796 41.4933C54.3502 41.8831 54.3478 42.1188 54.4463 42.2042ZM56.5588 39.7577C56.6425 39.8982 56.8838 39.9038 57.3566 39.4989C57.8293 39.0939 58.2774 38.3279 58.2774 38.3279C58.2774 38.3279 57.45 38.6969 56.9921 39.0468C56.5193 39.4517 56.475 39.6171 56.5588 39.7577ZM52.5644 37.4469C53.148 37.3079 53.9482 36.8135 53.9482 36.8135C53.9482 36.8135 53.0691 36.6961 52.4141 36.875C51.8306 37.014 51.673 37.149 51.7419 37.3447C51.769 37.4701 51.9242 37.5707 52.5644 37.4469ZM55.8616 37.149C56.4451 37.01 57.2454 36.5156 57.2454 36.5156C57.2454 36.5156 56.3663 36.3981 55.7113 36.5771C55.1277 36.716 54.9701 36.851 55.0391 37.0467C55.1228 37.1873 55.278 37.2879 55.8616 37.149ZM58.5037 37.03C58.5875 37.1705 58.7574 37.2161 59.3139 36.9517C59.8703 36.6873 60.4736 36.0219 60.4736 36.0219C60.4736 36.0219 59.592 36.1402 59.0356 36.4045C58.4643 36.724 58.42 36.8894 58.5037 37.03ZM73.957 29.6519C73.4005 29.9163 72.519 30.0346 72.519 30.0346C72.519 30.0346 73.1222 29.3692 73.6787 29.1048C74.2352 28.8404 74.4051 28.886 74.4888 29.0265C74.5726 29.1671 74.5283 29.3324 73.957 29.6519ZM73.7079 26.2773C73.6241 26.1367 73.3828 26.1311 72.9101 26.5361C72.4374 26.941 71.9893 27.707 71.9893 27.707C71.9893 27.707 72.8166 27.338 73.2894 26.933C73.804 26.5984 73.7916 26.4178 73.7079 26.2773ZM71.524 28.7637C71.4403 28.6232 71.199 28.6176 70.7262 29.0225C70.2535 29.4275 69.8054 30.1935 69.8054 30.1935C69.8054 30.1935 70.6328 29.8245 71.0907 29.4746C71.6201 29.0848 71.6792 28.8644 71.524 28.7637ZM75.575 31.0897C74.9914 31.2287 74.1912 31.7231 74.1912 31.7231C74.1912 31.7231 75.0703 31.8405 75.7253 31.6616C76.3089 31.5226 76.4665 31.3876 76.3975 31.1919C76.3851 31.0114 76.1586 30.9507 75.575 31.0897ZM72.2212 31.3724C71.6377 31.5114 70.8374 32.0058 70.8374 32.0058C70.8374 32.0058 71.7165 32.1233 72.3715 31.9443C72.9551 31.8054 73.1127 31.6704 73.0437 31.4747C73.0314 31.2942 72.8614 31.2486 72.2212 31.3724ZM69.6505 31.4515C69.5667 31.3109 69.3968 31.2654 68.8403 31.5298C68.2839 31.7942 67.6806 32.4595 67.6806 32.4595C67.6806 32.4595 68.5622 32.3413 69.1186 32.0769C69.6899 31.7574 69.7342 31.5921 69.6505 31.4515Z" fill="white"/>
<path opacity="0.3" d="M53.5558 30.8013C54.1789 30.9682 54.8832 31.5114 54.8832 31.5114C54.8832 31.5114 53.9598 31.5593 53.3515 31.3373C52.7285 31.1703 52.6595 30.9746 52.6891 30.8644C52.8048 30.6591 53.0042 30.5944 53.5558 30.8013ZM51.3572 33.3429C51.3696 33.5234 51.5247 33.6241 52.1206 33.6656C52.7165 33.7071 53.6424 33.4236 53.6424 33.4236C53.6424 33.4236 52.7657 33.0705 52.155 33.0841C51.5591 33.0426 51.4015 33.1776 51.3572 33.3429ZM54.711 33.0601C54.7233 33.2406 54.8785 33.3413 55.4744 33.3828C56.0703 33.4244 56.9961 33.1408 56.9961 33.1408C56.9961 33.1408 56.1195 32.7878 55.5088 32.8013C54.8562 32.7446 54.6987 32.8796 54.711 33.0601ZM53.4645 28.6503C53.9865 28.9674 54.9075 29.1551 54.9075 29.1551C54.9075 29.1551 54.3041 28.4618 53.782 28.1447C53.26 27.8276 53.0605 27.8923 52.9743 27.9873C52.8734 28.1375 52.8857 28.318 53.4645 28.6503ZM56.07 30.707C56.592 31.0241 57.513 31.2118 57.513 31.2118C57.513 31.2118 56.9096 30.5185 56.3876 30.2014C55.8655 29.8843 55.666 29.949 55.5799 30.0441C55.4789 30.1942 55.5479 30.3899 56.07 30.707ZM57.9835 32.4012C57.9392 32.5665 58.0229 32.7071 58.6459 32.874C59.269 33.041 60.1776 33.0481 60.1776 33.0481C60.1776 33.0481 59.4166 32.4898 58.8503 32.3381C58.2272 32.1711 58.0278 32.2358 57.9835 32.4012ZM74.5268 37.72C73.9038 37.553 73.1994 37.0099 73.1994 37.0099C73.1994 37.0099 74.1228 36.962 74.7311 37.184C75.3541 37.351 75.4231 37.5467 75.3936 37.6569C75.3493 37.8222 75.1498 37.8869 74.5268 37.72ZM76.7402 35.1233C76.7278 34.9427 76.5727 34.8421 75.9768 34.8006C75.3809 34.759 74.455 35.0426 74.455 35.0426C74.455 35.0426 75.3317 35.3956 75.9424 35.3821C76.5949 35.4388 76.7525 35.3038 76.7402 35.1233ZM73.443 35.4212C73.4307 35.2407 73.2755 35.1401 72.6796 35.0985C72.0837 35.057 71.1579 35.3405 71.1579 35.3405C71.1579 35.3405 72.0345 35.6936 72.6452 35.68C73.2978 35.7367 73.4554 35.6017 73.443 35.4212ZM74.6896 39.8311C74.1675 39.514 73.2465 39.3263 73.2465 39.3263C73.2465 39.3263 73.8499 40.0196 74.372 40.3367C74.8941 40.6538 75.0935 40.5891 75.1797 40.494C75.2806 40.3439 75.2683 40.1633 74.6896 39.8311ZM72.0841 37.7743C71.562 37.4572 70.641 37.2695 70.641 37.2695C70.641 37.2695 71.2444 37.9628 71.7665 38.2799C72.2885 38.597 72.488 38.5323 72.5742 38.4373C72.6751 38.2871 72.6061 38.0914 72.0841 37.7743ZM70.1139 36.065C70.1582 35.8997 70.0745 35.7591 69.4514 35.5921C68.8284 35.4252 67.9198 35.418 67.9198 35.418C67.9198 35.418 68.6807 35.9763 69.2471 36.1281C69.9268 36.3102 70.0696 36.2303 70.1139 36.065Z" fill="white"/>
</g>
<path d="M23.2821 110.651L20.1445 54.0392C20.011 51.7027 21.8135 50.4342 23.1486 49.4996C24.4171 48.6317 24.9511 48.1644 24.8844 47.4301C24.8176 46.6957 24.2168 46.3619 22.8816 45.6276C21.4797 44.8932 19.5437 43.8251 19.4101 41.4885C19.2766 39.152 21.0791 37.8835 22.4143 36.9489C23.6827 36.081 24.2168 35.6137 24.2168 34.8794C24.15 34.145 23.5492 33.8112 22.214 33.0769C20.8121 32.3425 18.8761 31.2744 18.7425 28.9378C18.609 26.6013 20.4115 25.3328 21.7467 24.3982C23.0151 23.5304 23.5492 23.063 23.4824 22.3287L22.6813 7.10764L25.4852 6.97412L26.3531 22.1952C26.4866 24.5317 24.6841 25.8002 23.3489 26.7348C22.0805 27.6027 21.5464 28.07 21.5464 28.8043C21.6132 29.5387 22.214 29.8725 23.5492 30.6068C24.9511 31.3412 26.8871 32.4093 27.0207 34.7459C27.1542 37.0824 25.3517 38.3509 24.0165 39.2855C22.7481 40.1533 22.214 40.6207 22.2808 41.355C22.3475 42.0894 22.9484 42.4231 24.2835 43.1575C25.6855 43.8918 27.6215 44.96 27.755 47.2966C27.8885 49.6331 26.086 50.9015 24.7509 51.8362C23.4824 52.704 22.9484 53.1714 23.0151 53.9057L26.1528 110.517L23.2821 110.651Z" fill="#DD4F51"/>
<g opacity="0.7" filter="url(#filter0_d_65_12962)">
<path d="M38.1695 127.474C24.6174 127.474 18.5424 126.072 16.4061 122.133L15.9388 120.731L15.6717 118.996L15.605 118.595C13.4019 99.5021 12.4673 67.3242 12.1335 51.1018L12.0668 47.4968V46.4954C12 43.2242 12 41.2882 12 41.0879C12 40.8209 12 39.953 12 39.1519V38.017C12 37.6832 12 37.0156 12 36.348L12.0668 33.1436H64.7396L64.8064 36.348C64.8064 37.0156 64.8064 37.6165 64.8064 38.017V39.1519C64.8064 40.0198 64.8064 40.8877 64.8064 41.1547C64.8064 41.4885 64.8064 43.558 64.7396 46.6957L64.6728 53.2381L64.6061 53.1713C64.2723 69.7943 63.3377 100.17 61.2014 118.462L60.9343 120.598L60.467 122.067C58.3975 126.005 52.1222 127.474 38.6368 127.474H38.1695Z" fill="white"/>
</g>
<mask id="mask1_65_12962" style="mask-type:alpha" maskUnits="userSpaceOnUse" x="15" y="43" width="47" height="77">
<path opacity="0.9" d="M15.338 43.6916C15.338 44.4259 15.338 45.2938 15.338 46.2952V47.2298C15.605 61.7165 16.4729 95.1628 18.8094 114.523L18.8762 114.923H18.9429C19.5438 117.126 22.6814 119.062 38.1028 119.062H38.6368C54.1917 119.062 57.2626 117.06 57.8634 114.79L57.9302 114.389C60.2668 95.096 61.1346 61.85 61.4017 47.3633H61.4684V46.3619C61.4684 45.2938 61.4684 44.3592 61.5352 43.558H15.338V43.6916Z" fill="#D9D9D9"/>
</mask>
<g mask="url(#mask1_65_12962)">
<rect x="-0.0167236" y="42.3563" width="79.4432" height="26.7036" fill="#FA8585"/>
<rect x="-0.0167236" y="69.0599" width="79.4432" height="26.7036" fill="#7B80FD"/>
<rect x="-0.0167236" y="95.7635" width="79.4432" height="26.7036" fill="#90FCA1"/>
</g>
<path opacity="0.2" d="M32.6287 108.448C32.5619 110.584 30.7594 112.253 28.6231 112.186C26.4868 112.12 24.8179 110.317 24.8846 108.181C24.9514 106.044 26.7539 104.376 28.8902 104.442C30.9597 104.509 32.6954 106.312 32.6287 108.448Z" fill="white"/>
<path opacity="0.2" d="M28.7565 98.0334C28.6898 100.704 26.42 102.773 23.8164 102.707C21.146 102.64 19.0765 100.37 19.1432 97.7663C19.21 95.096 21.4798 93.0265 24.0834 93.0932C26.7538 93.16 28.8233 95.363 28.7565 98.0334Z" fill="white"/>
<path opacity="0.2" d="M32.3615 88.1531C32.2948 89.8221 30.8928 91.1572 29.2239 91.0905C27.5549 91.0237 26.2197 89.6218 26.2865 87.9528C26.3532 86.2838 27.7552 84.9486 29.4241 85.0154C31.0931 85.0822 32.4283 86.4841 32.3615 88.1531Z" fill="white"/>
<path opacity="0.2" d="M26.0862 82.078C26.0195 83.2797 25.0181 84.281 23.8164 84.2143C22.548 84.1475 21.6134 83.1461 21.6801 81.8777C21.7469 80.6761 22.7483 79.6747 23.9499 79.7414C25.1516 79.8082 26.153 80.8763 26.0862 82.078Z" fill="white"/>
<path opacity="0.2" d="M23.6829 73.7331C23.6161 75.0015 22.6147 75.9362 21.3463 75.9362C20.1446 75.8694 19.1432 74.868 19.21 73.5996C19.2768 72.3979 20.2781 71.3965 21.5466 71.4633C22.7482 71.4633 23.6829 72.5314 23.6829 73.7331Z" fill="white"/>
<path opacity="0.4" d="M24.0165 126.539C26.8204 127.074 30.4921 127.407 35.0985 127.474C31.2264 97.5661 29.8913 51.1685 29.4907 33.1436H18.5422C18.9428 50.9683 20.278 96.6314 24.0165 126.539Z" fill="white"/>
<defs>
<filter id="filter0_d_65_12962" x="11" y="33.1436" width="54.8064" height="102.33" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
<feOffset dy="7"/>
<feGaussianBlur stdDeviation="0.5"/>
<feComposite in2="hardAlpha" operator="out"/>
<feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.25 0"/>
<feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_65_12962"/>
<feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_65_12962" result="shape"/>
</filter>
</defs>
</svg>
''';

  String get melonStakan => '''
<svg width="77" height="136" viewBox="0 0 77 136" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M75.2826 23.6455C75.3483 23.7145 75.4173 23.7178 75.4141 23.7835L76.5752 22.6567C76.5095 22.5878 76.4438 22.5188 76.3748 22.5154C69.1651 15.9144 59.923 12.6989 50.6579 12.7703L50.6464 14.4138C59.57 14.2598 68.4737 17.3272 75.2826 23.6455Z" fill="#4F8625"/>
<path d="M50.7876 14.3549L50.7857 15.8015C59.2234 15.6895 67.7166 18.6709 74.2659 24.6477C74.3316 24.7167 74.4005 24.7201 74.3973 24.7857L75.4141 23.7834C75.3484 23.7144 75.2827 23.6454 75.2827 23.6454C68.4737 17.3271 59.57 14.2598 50.7876 14.3549Z" fill="#F6F779"/>
<path d="M74.3975 24.7857C74.3317 24.7167 74.3317 24.7168 74.266 24.6478C67.72 18.6054 59.2235 15.6896 50.7858 15.8016L51.4824 46.6773L74.3975 24.7857Z" fill="#D74232"/>
<path d="M62.2992 24.8496C61.7522 26.138 60.3616 27.7137 60.3616 27.7137C60.3616 27.7137 60.4614 25.6801 60.9427 24.3227C61.4898 23.0344 61.9163 22.7923 62.2546 22.9404C62.6619 23.0919 62.7773 23.5579 62.2992 24.8496Z" fill="#3F3E3E"/>
<path d="M56.2563 19.8184C55.8426 19.7981 55.485 20.0436 55.3452 21.4835C55.1397 22.8544 55.6605 24.9185 55.6605 24.9185C55.6605 24.9185 56.5812 23.0566 56.7868 21.6857C56.8576 20.2425 56.5979 19.901 56.2563 19.8184Z" fill="#3F3E3E"/>
<path d="M56.3718 27.3208C55.9581 27.3005 55.6005 27.546 55.4607 28.9858C55.2552 30.3567 55.7759 32.4208 55.7759 32.4208C55.7759 32.4208 56.6967 30.5589 56.9022 29.1881C57.042 27.7482 56.7823 27.4067 56.3718 27.3208Z" fill="#3F3E3E"/>
<path d="M67.1816 25.3523C66.2962 26.4925 65.7138 28.5025 65.7138 28.5025C65.7138 28.5025 67.4987 27.3406 68.3183 26.1314C69.2037 24.9912 69.0883 24.5252 68.8222 24.3149C68.4871 24.1012 67.998 24.2087 67.1816 25.3523Z" fill="#3F3E3E"/>
<path d="M61.7991 30.8094C60.9827 31.953 60.3313 33.9596 60.3313 33.9596C60.3313 33.9596 62.1162 32.7977 62.9359 31.5885C63.8212 30.4483 63.7058 29.9823 63.4397 29.772C63.1014 29.6238 62.6155 29.6657 61.7991 30.8094Z" fill="#3F3E3E"/>
<path d="M57.3839 34.867C57.0456 34.7189 56.619 34.961 56.072 36.2494C55.5249 37.5377 55.4909 39.6404 55.4909 39.6404C55.4909 39.6404 56.8814 38.0646 57.4284 36.7762C57.9098 35.4189 57.7222 35.0151 57.3839 34.867Z" fill="#3F3E3E"/>
<path d="M74.8301 24.4124C74.4951 24.1987 72.3066 22.3158 72.3066 22.3158C72.3066 22.3158 71.1795 21.3398 70.2432 20.7021C69.3069 20.0643 68.5052 19.4989 67.7661 19.068C67.027 18.6372 65.7459 17.9825 65.4043 17.9C65.0628 17.8174 64.0382 17.5699 62.8228 16.9842C61.6075 16.3984 60.251 15.8715 59.9752 15.858C59.7027 15.7789 58.1361 15.3075 57.8603 15.2939C57.5845 15.2804 56.2151 15.0159 55.9393 15.0024C55.6635 14.9888 54.6229 15.0693 53.3128 15.005C52.1406 14.9475 51.2475 14.8379 50.7616 14.8798L50.7823 15.8672L50.8094 16.7234C51.8533 16.5774 52.8843 16.6937 54.1061 17.1483C55.5315 17.6785 56.8062 18.4644 58.2348 18.9291C60.6159 19.7036 63.1303 19.1693 65.3445 20.5274C66.2841 21.0996 67.2894 21.7408 68.3075 22.1196C70.2059 22.8703 72.5148 23.707 74.2496 24.9758L74.4661 24.7891L74.8301 24.4124Z" fill="#F6F779"/>
<path d="M23.2822 110.677L20.1445 54.0651C20.011 51.7285 21.8135 50.4601 23.1487 49.5255C24.4171 48.6576 24.9512 48.1903 24.8844 47.456C24.8177 46.7216 24.2168 46.3878 22.8817 45.6535C21.4797 44.9191 19.5437 43.851 19.4102 41.5144C19.2767 39.1778 21.0792 37.9094 22.4143 36.9748C23.6828 36.1069 24.2168 35.6396 24.2168 34.9053C24.1501 34.1709 23.5493 33.8371 22.2141 33.1028C20.8121 32.3684 18.8761 31.3003 18.7426 28.9637C18.6091 26.6271 20.4116 25.3587 21.7468 24.4241C23.0152 23.5562 23.5492 23.0889 23.4825 22.3546L22.6814 7.13352L25.4853 7L26.3531 22.2211C26.4866 24.5576 24.6842 25.826 23.349 26.7607C22.0805 27.6285 21.5465 28.0958 21.5465 28.8302C21.6132 29.5645 22.2141 29.8983 23.5493 30.6327C24.9512 31.367 26.8872 32.4352 27.0207 34.7717C27.1542 37.1083 25.3517 38.3767 24.0166 39.3114C22.7481 40.1792 22.2141 40.6465 22.2808 41.3809C22.3476 42.1152 22.9484 42.449 24.2836 43.1834C25.6855 43.9177 27.6216 44.9859 27.7551 47.3224C27.8886 49.659 26.0861 50.9274 24.7509 51.862C23.4825 52.7299 22.9484 53.1972 23.0152 53.9316L26.1528 110.543L23.2822 110.677Z" fill="#DD4F51"/>
<g opacity="0.7" filter="url(#filter0_d_67_71)">
<path d="M38.1695 127.5C24.6174 127.5 18.5424 126.098 16.4061 122.159L15.9388 120.757L15.6717 119.022L15.605 118.621C13.4019 99.5279 12.4673 67.3501 12.1335 51.1277L12.0668 47.5227V46.5213C12 43.2501 12 41.3141 12 41.1138C12 40.8468 12 39.9789 12 39.1778V38.0429C12 37.7091 12 37.0415 12 36.3739L12.0668 33.1695H64.7396L64.8064 36.3739C64.8064 37.0415 64.8064 37.6423 64.8064 38.0429V39.1778C64.8064 40.0457 64.8064 40.9135 64.8064 41.1806C64.8064 41.5144 64.8064 43.5839 64.7396 46.7216L64.6728 53.264L64.6061 53.1972C64.2723 69.8202 63.3377 100.196 61.2014 118.488L60.9343 120.624L60.467 122.092C58.3975 126.031 52.1222 127.5 38.6368 127.5H38.1695Z" fill="white"/>
</g>
<mask id="mask0_67_71" style="mask-type:alpha" maskUnits="userSpaceOnUse" x="15" y="43" width="47" height="77">
<path opacity="0.9" d="M15.3379 43.7174C15.3379 44.4518 15.3379 45.3197 15.3379 46.321V47.2557C15.6049 61.7424 16.4728 95.1886 18.8094 114.549L18.8761 114.949H18.9429C19.5437 117.152 22.6814 119.088 38.1027 119.088H38.6368C54.1916 119.088 57.2625 117.086 57.8634 114.816L57.9301 114.415C60.2667 95.1219 61.1346 61.8759 61.4016 47.3892H61.4684V46.3878C61.4684 45.3197 61.4684 44.385 61.5351 43.5839H15.3379V43.7174Z" fill="#D9D9D9"/>
</mask>
<g mask="url(#mask0_67_71)">
<rect x="-0.0167236" y="42.3822" width="79.4432" height="26.7036" fill="#FA8585"/>
<rect x="-0.0167236" y="69.0858" width="79.4432" height="26.7036" fill="#7B80FD"/>
<rect x="-0.0167236" y="95.7894" width="79.4432" height="26.7036" fill="#90FCA1"/>
</g>
<path opacity="0.2" d="M32.6287 108.474C32.5619 110.61 30.7594 112.279 28.6231 112.212C26.4868 112.145 24.8179 110.343 24.8846 108.207C24.9514 106.07 26.7539 104.401 28.8902 104.468C30.9597 104.535 32.6954 106.337 32.6287 108.474Z" fill="white"/>
<path opacity="0.2" d="M28.7566 98.0593C28.6898 100.73 26.42 102.799 23.8164 102.732C21.1461 102.666 19.0765 100.396 19.1433 97.7922C19.2101 95.1219 21.4799 93.0523 24.0835 93.1191C26.7538 93.1859 28.8234 95.3889 28.7566 98.0593Z" fill="white"/>
<path opacity="0.2" d="M32.3615 88.179C32.2948 89.8479 30.8928 91.1831 29.2239 91.1164C27.5549 91.0496 26.2197 89.6477 26.2865 87.9787C26.3532 86.3097 27.7552 84.9745 29.4241 85.0413C31.0931 85.108 32.4283 86.51 32.3615 88.179Z" fill="white"/>
<path opacity="0.2" d="M26.0862 82.1039C26.0195 83.3055 25.0181 84.3069 23.8164 84.2402C22.548 84.1734 21.6134 83.172 21.6801 81.9036C21.7469 80.7019 22.7483 79.7006 23.9499 79.7673C25.1516 79.8341 26.153 80.9022 26.0862 82.1039Z" fill="white"/>
<path opacity="0.2" d="M23.6829 73.759C23.6162 75.0274 22.6148 75.962 21.3464 75.962C20.1447 75.8953 19.1433 74.8939 19.2101 73.6255C19.2768 72.4238 20.2782 71.4224 21.5466 71.4892C22.7483 71.4892 23.6829 72.5573 23.6829 73.759Z" fill="white"/>
<path opacity="0.4" d="M24.0165 126.565C26.8204 127.099 30.4921 127.433 35.0985 127.5C31.2264 97.5919 29.8913 51.1944 29.4907 33.1695H18.5422C18.9428 50.9941 20.278 96.6573 24.0165 126.565Z" fill="white"/>
<defs>
<filter id="filter0_d_67_71" x="11" y="33.1695" width="54.8064" height="102.33" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
<feOffset dy="7"/>
<feGaussianBlur stdDeviation="0.5"/>
<feComposite in2="hardAlpha" operator="out"/>
<feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.25 0"/>
<feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_67_71"/>
<feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_67_71" result="shape"/>
</filter>
</defs>
</svg>
''';

  Widget _getBar(int indexBar, String assetBar) => Obx(
        () => indexBar == 1.obs.value && cocDone.value
            ? Positioned(
                right: 20,
                top: (Get.height) / 5,
                child: Image.asset(
                  ha.value
                      ? 'assets/people/ha_$assetBar.png'
                      : 'assets/people/sa_$assetBar.png',
                  filterQuality: FilterQuality.high,
                  height: 850,
                ),
              ).animate().move(
                delay: 200.ms,
                duration: Duration(milliseconds: 450),
                begin: Offset.zero,
                end: Offset(400, 0))
            : indexBar == 1
                ? Positioned(
                    right: 20,
                    top: (Get.height) / 5,
                    child: GestureDetector(
                      onTap: () {
                        cocDone.value = true;
                        setState(() {});
                      },
                      child: AnimatedContainer(
                        duration: 200.ms,
                        child: Image.asset(
                          'assets/people/$assetBar.png',
                          filterQuality: FilterQuality.high,
                          fit: BoxFit.fill,
                        ).animate(
                          autoPlay: true,
                        )..fade(
                            duration: 350.ms,
                            begin: 0.5,
                            end: 1,
                          ),
                      ),
                    ),
                  )
                : AnimatedPositioned(
                    duration: 200.ms,
                    right: 20,
                    top: (Get.height) / 5,
                    child: AnimatedContainer(
                      duration: 200.ms,
                      child: Image.asset(
                        'assets/people/$assetBar.png',
                        filterQuality: FilterQuality.high,
                        fit: BoxFit.fill,
                      ).animate(
                        autoPlay: true,
                      )..fade(
                          duration: 350.ms,
                          begin: 0,
                          end: 0.5,
                        ),
                    ),
                  ),
      );

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Container(
        decoration: BoxDecoration(
            gradient: LinearGradient(
          colors: [Color.fromRGBO(6, 5, 52, 1), Color.fromRGBO(0, 9, 85, 1)],
          begin: Alignment.topCenter,
          end: Alignment.bottomCenter,
        )),
        child: Obx(
          () => CustomPaint(
            painter: Fonari(animatorFonarei: rotatorFon.value),
            child: Stack(
              clipBehavior: Clip.none,
              alignment: Alignment.topCenter,
              children: [
                ...List.generate(
                  2,
                  (donInd) => _getBar(
                    donInd,
                    rao[donInd],
                  ),
                ),
                Positioned(
                  right: 60,
                  top: (Get.height) / 7,
                  child: AnimatedOpacity(
                    duration: 150.ms,
                    opacity: showDi.value ? 1 : 0,
                    child: Stack(
                      alignment: Alignment.center,
                      children: [
                        Image.asset(
                          'assets/bar_dial.png',
                          filterQuality: FilterQuality.high,
                          height: 107,
                        ),
                        Positioned(
                          bottom: 30,
                          child: Obx(
                            () => SvgPicture.string(
                              generStakan(wantedBut.value.butCol,
                                  wantedBut.value.butType),
                              height: 68,
                            ),
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
                Positioned(
                  top: ((Get.height) / 5) * 3 - 18,
                  child: Image.asset(
                    'assets/bar_table.png',
                    filterQuality: FilterQuality.high,
                    fit: BoxFit.cover,
                    width: Get.width,
                    height: (Get.height / 5) * 2 + 18,
                  ),
                ),
                Positioned(
                  top: ((Get.height) / 5) * 3 - 122,
                  child: Obx(
                    () => SvgPicture.string(
                      generStakan(curBut.value.butCol, curBut.value.butType),
                      height: 132,
                    ),
                  ),
                ),
                Positioned(
                  right: -70,
                  bottom: 0,
                  child: Padding(
                    padding: const EdgeInsets.only(
                      bottom: 80,
                    ),
                    child: Image.asset(
                      'assets/kassa.png',
                      filterQuality: FilterQuality.high,
                      height: 165,
                    ),
                  ),
                ),
                Positioned(
                  right: 22,
                  bottom: 111,
                  child: Padding(
                    padding: const EdgeInsets.only(
                      bottom: 80,
                    ),
                    child: Container(
                      width: 69,
                      alignment: Alignment.center,
                      child: Obx(
                        () => Text(
                          NumberFormat.decimalPattern()
                              .format(barSco.value)
                              .toUpperCase(),
                          style: TextStyle(
                            fontSize: 20,
                            fontWeight: FontWeight.w400,
                            color: Colors.white,
                          ),
                        ),
                      ),
                    ),
                  ),
                ),
                Align(
                  alignment: Alignment.topCenter,
                  child: SafeArea(
                    child: IntrinsicHeight(
                      child: Padding(
                        padding: EdgeInsets.symmetric(horizontal: 14),
                        child: Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          children: [
                            GestureDetector(
                              onTap: () {
                                if (mup.value) {
                                  rotator.cancel();
                                  rotatorTur.value = 0;
                                  mup.toggle();
                                  Disco.stoBarMu();
                                } else {
                                  rotator = Timer.periodic(
                                      Duration(milliseconds: 50), (timer) {
                                    rotatorTur.value += 0.015;
                                    if (rotatorTur.value >= 1) {
                                      rotatorTur.value -= 1;
                                    }
                                  });
                                  Disco.goBarMu('mus/disco.mp3');
                                  mup.toggle();
                                }
                                Komorka.komorka!.setBool('mup', mup.value);
                              },
                              child: Obx(
                                () => mup.value
                                    ? Obx(
                                        () => AnimatedRotation(
                                          duration: Duration(milliseconds: 10),
                                          turns: rotatorTur.value,
                                          child: Image.asset(
                                            'assets/disk.png',
                                            height: 45,
                                          ),
                                        ),
                                      )
                                    : Image.asset(
                                        'assets/cross_disk.png',
                                        height: 45,
                                      ),
                              ),
                            ),
                            Obx(
                              () => Text(
                                '0${(widget.barSec - barSecLe.value) ~/ 60}:${(widget.barSec - barSecLe.value) % 60 < 10 ? '0${(widget.barSec - barSecLe.value) % 60}' : (widget.barSec - barSecLe.value) % 60}',
                                textAlign: TextAlign.center,
                                style: TextStyle(
                                  fontSize: 24,
                                  fontWeight: FontWeight.w400,
                                  color: Colors.white,
                                  shadows: [
                                    Shadow(
                                      offset: const Offset(0, 2),
                                      blurRadius: 0,
                                      color: Color.fromRGBO(35, 50, 100, 0.5),
                                    ),
                                    Shadow(
                                        offset: Offset(-1, -1),
                                        color: Color.fromRGBO(0, 23, 105, 1)),
                                    Shadow(
                                        offset: Offset(1, -1),
                                        color: Color.fromRGBO(0, 23, 105, 1)),
                                    Shadow(
                                        offset: Offset(1, 1),
                                        color: Color.fromRGBO(0, 23, 105, 1)),
                                    Shadow(
                                        offset: Offset(-1, 1),
                                        color: Color.fromRGBO(0, 23, 105, 1)),
                                  ],
                                ),
                              ),
                            ),
                            GestureDetector(
                              onTap: () {
                                barPa = true;
                                _barPau();
                              },
                              child: Image.asset(
                                'assets/bar_pause.png',
                                height: 39,
                                width: 39,
                                filterQuality: FilterQuality.high,
                              ),
                            ),
                          ],
                        ),
                      ),
                    ),
                  ),
                ),
                Align(
                  alignment: Alignment.bottomCenter,
                  child: Padding(
                    padding: const EdgeInsets.only(bottom: 80),
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.start,
                      crossAxisAlignment: CrossAxisAlignment.end,
                      children: [
                        GestureDetector(
                          onTap: () async {
                            if (!_rdDrController.isAnimating &&
                                curBut.value.butCol.length < 3) {
                              _rdDrController.forward();
                              Disco.musBarOne('mus/voda.mp3');
                            }
                          },
                          child: Image.asset(
                            'assets/rd_dr.png',
                            filterQuality: FilterQuality.high,
                            height: 140,
                          ).animate(
                            autoPlay: false,
                            controller: _rdDrController,
                            onComplete: (controller) {
                              curBut.value.butCol.add(rCo);
                              _checkBarDone();
                              controller.reverse();
                            },
                          )
                            ..rotate(
                              duration: Duration(milliseconds: 250),
                              begin: 0,
                              end: 3.1415 / 16,
                            )
                            ..move(
                              duration: Duration(milliseconds: 250),
                              begin: Offset(0, 0),
                              end: Offset(96, -300),
                            ),
                        ),
                        SizedBox(
                          width: 5,
                        ),
                        GestureDetector(
                          onTap: () async {
                            if (!_blDrController.isAnimating &&
                                curBut.value.butCol.length < 3) {
                              _blDrController.forward();
                              Disco.musBarOne('mus/voda.mp3');
                            }
                          },
                          child: Image.asset(
                            'assets/bl_dr.png',
                            filterQuality: FilterQuality.high,
                            height: 140,
                          ).animate(
                            autoPlay: false,
                            controller: _blDrController,
                            onComplete: (controller) {
                              curBut.value.butCol.add(bCo);
                              _checkBarDone();
                              controller.reverse();
                            },
                          )
                            ..rotate(
                              duration: Duration(milliseconds: 250),
                              begin: 0,
                              end: 3.1415 / 16,
                            )
                            ..move(
                              duration: Duration(milliseconds: 250),
                              begin: Offset(0, 0),
                              end: Offset(48, -300),
                            ),
                        ),
                        SizedBox(
                          width: 5,
                        ),
                        GestureDetector(
                          onTap: () async {
                            if (!_grDrController.isAnimating &&
                                curBut.value.butCol.length < 3) {
                              _grDrController.forward();
                              Disco.musBarOne('mus/voda.mp3');
                            }
                          },
                          child: Image.asset(
                            'assets/gr_dr.png',
                            filterQuality: FilterQuality.high,
                            height: 140,
                          ).animate(
                            autoPlay: false,
                            controller: _grDrController,
                            onComplete: (controller) {
                              curBut.value.butCol.add(gCo);
                              _checkBarDone();
                              controller.reverse();
                            },
                          )
                            ..rotate(
                              duration: Duration(milliseconds: 250),
                              begin: 0,
                              end: 3.1415 / 16,
                            )
                            ..move(
                              duration: Duration(milliseconds: 250),
                              begin: Offset(0, 0),
                              end: Offset(0, -300),
                            ),
                        ),
                        SizedBox(
                          width: 5,
                        ),
                        Column(
                          mainAxisAlignment: MainAxisAlignment.end,
                          children: [
                            GestureDetector(
                              onTap: () {
                                if (!_meCorController.isAnimating &&
                                    curBut.value.butType == 'em') {
                                  _meCorController.forward();
                                  Disco.musBarOne('mus/fruits.mp3');
                                }
                              },
                              child: Image.asset(
                                'assets/melons.png',
                                filterQuality: FilterQuality.high,
                                height: 45,
                              ).animate(
                                autoPlay: false,
                                controller: _meCorController,
                                onComplete: (controller) {
                                  curBut.value.butType = 'me';
                                  _checkBarDone();
                                  controller.reset();
                                },
                              )
                                ..move(
                                  duration: Duration(milliseconds: 100),
                                  begin: Offset(0, 0),
                                  end: Offset(0, -20),
                                )
                                ..move(
                                  delay: Duration(milliseconds: 100),
                                  duration: Duration(milliseconds: 100),
                                  begin: Offset(0, 0),
                                  end: Offset(0, 40),
                                )
                                ..move(
                                  delay: Duration(milliseconds: 200),
                                  duration: Duration(milliseconds: 100),
                                  begin: Offset(0, 0),
                                  end: Offset(0, -20),
                                ),
                            ),
                            GestureDetector(
                              onTap: () {
                                if (!_laCorController.isAnimating &&
                                    curBut.value.butType == 'em') {
                                  _laCorController.forward();
                                  Disco.musBarOne('mus/fruits.mp3');
                                }
                              },
                              child: Image.asset(
                                'assets/laim.png',
                                filterQuality: FilterQuality.high,
                                height: 45,
                              ).animate(
                                autoPlay: false,
                                controller: _laCorController,
                                onComplete: (controller) {
                                  curBut.value.butType = 'la';
                                  _checkBarDone();
                                  controller.reset();
                                },
                              )
                                ..move(
                                  duration: Duration(milliseconds: 100),
                                  begin: Offset(0, 0),
                                  end: Offset(0, -20),
                                )
                                ..move(
                                  delay: Duration(milliseconds: 100),
                                  duration: Duration(milliseconds: 100),
                                  begin: Offset(0, 0),
                                  end: Offset(0, 40),
                                )
                                ..move(
                                  delay: Duration(milliseconds: 200),
                                  duration: Duration(milliseconds: 100),
                                  begin: Offset(0, 0),
                                  end: Offset(0, -20),
                                ),
                            ),
                            GestureDetector(
                              onTap: () {
                                if (!_orCorController.isAnimating &&
                                    curBut.value.butType == 'em') {
                                  _orCorController.forward();
                                  Disco.musBarOne('mus/fruits.mp3');
                                }
                              },
                              child: Image.asset(
                                'assets/oranges.png',
                                filterQuality: FilterQuality.high,
                                height: 45,
                              ).animate(
                                autoPlay: false,
                                controller: _orCorController,
                                onComplete: (controller) {
                                  curBut.value.butType = 'or';
                                  _checkBarDone();
                                  controller.reset();
                                },
                              )
                                ..move(
                                  duration: Duration(milliseconds: 100),
                                  begin: Offset(0, 0),
                                  end: Offset(0, -20),
                                )
                                ..move(
                                  delay: Duration(milliseconds: 100),
                                  duration: Duration(milliseconds: 100),
                                  begin: Offset(0, 0),
                                  end: Offset(0, 40),
                                )
                                ..move(
                                  delay: Duration(milliseconds: 200),
                                  duration: Duration(milliseconds: 100),
                                  begin: Offset(0, 0),
                                  end: Offset(0, -20),
                                ),
                            ),
                          ],
                        )
                      ],
                    ),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}
